{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "<div class=\"alert alert-info\">\n",
    "    <b> <h1> Life Insurance case study </h1></b>\n",
    "</div>\n",
    "\n",
    "\n",
    "https://www.kaggle.com/c/prudential-life-insurance-assessment/data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Introduction\n",
    "\n",
    "Siham, one of the largest issuers of life insurance in the Morocco, wants to develop an on-line the life insurance application process. Customers provide extensive information to identify risk classification and eligibility, including scheduling medical exams. Siham wants to make it quicker and less labor intensive for new and existing customers to get a quote while maintaining privacy boundaries.\n",
    "\n",
    "By developing a predictive model that accurately classifies risk using a more automated approach, you can greatly help Siham to better understand the predictive power of the data points in the existing assessment, enabling it to significantly streamline the process.\n",
    "\n",
    "### Data : \n",
    "\n",
    "|  Num \t|   Name\t|   Values\t|\n",
    "|-------|-------|-------|\n",
    "|  1 \t|  `Id` \t|   int\t|\n",
    "|  2\t|   `Product_Info_1`\t|  real \t|\n",
    "|  3 \t|   `Product_Info_2`\t|  'D3', 'A1', 'E1', 'D4', 'D2', 'A8', 'A2', 'D1', 'A7', 'A6', 'A3','A5', 'C4', 'C1', 'B2', 'C3', 'C2', 'A4', 'B1' \t|\n",
    "|  4 \t|   `Product_Info_3`\t|  integer \t|\n",
    "|  5 \t|  `Product_Info_4`|\treal   \t|\n",
    "|  6 \t|  `Product_Info_5`|\tinteger 2, 3\t|\n",
    "|  7 \t|   `Product_Info_6`|\tinteger 1, 3   \t|\n",
    "|  8 \t|   `Product_Info_7`|\tinteger 1, 2, 3   \t|\n",
    "|  9 \t|   `Ins_Age`|\treal   \t|\n",
    "|  10 \t|   `Ht`|\treal   \t|\n",
    "|  11 \t|   `Wt`|\treal    |\n",
    "|  12 \t|   `BMI`|\treal\t|\n",
    "|  13 \t|   `Medical_Keyword_`|\tint 1/0   \t|\n",
    "|  14 \t|   `Response`|\tinteger 1 -> 8   \t|\n",
    "\n",
    "### Description of the data\n",
    "* `id`: A unique identifier associated with an application.\n",
    "* `Product_Info_1_to_7`: A set of normalized variables relating to the product applied for\n",
    "* `Ins_Age`: Normalized age of applicant\n",
    "* `Ht`: Normalized height of applicant\n",
    "* `Wt`: Normalized weight of applicant\n",
    "* `BMI`: Normalized BMI of applicant. Body mass index (BMI) is a measure of body fat based on height and weight.\n",
    "\n",
    "* `Employment_Info_1-6`: A set of normalized variables relating to the employment history of the applicant.\n",
    "\n",
    "* `InsuredInfo_1-6`: A set of normalized variables providing information about the applicant.\n",
    "* `Insurance_History_1-9`: A set of normalized variables relating to the insurance history of the applicant.\n",
    "\n",
    "* `Family_Hist_1-5`: A set of normalized variables relating to the family history of the applicant.\n",
    "\n",
    "* `Medical_Keyword_`: A set of dummy variables relating to the presence of/absence of a medical keyword being associated with the application.\n",
    "* `Response`: This is the target variable, an ordinal variable relating to the final decision associated with an application "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "%matplotlib inline\n",
    "# Importations \n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.gridspec as gridspec\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pandas_profiling import ProfileReport\n",
    "\n",
    "\n",
    "from sklearn.model_selection import KFold, StratifiedKFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "\n",
    "sns.set()\n",
    "\n",
    "#pd.set_option('display.max_columns', None)  # or 1000\n",
    "#pd.set_option('display.max_rows', None)  # or 1000\n",
    "#pd.set_option('display.max_colwidth', -1)  # or 199"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 Acquire the data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Read  CSV\n",
    "\n",
    "**Q:** Load the [data] in the current path and display the head: the name of the file is trainCourse.csv."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_2</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>...</th>\n",
       "      <th>Medical_Keyword_40</th>\n",
       "      <th>Medical_Keyword_41</th>\n",
       "      <th>Medical_Keyword_42</th>\n",
       "      <th>Medical_Keyword_43</th>\n",
       "      <th>Medical_Keyword_44</th>\n",
       "      <th>Medical_Keyword_45</th>\n",
       "      <th>Medical_Keyword_46</th>\n",
       "      <th>Medical_Keyword_47</th>\n",
       "      <th>Medical_Keyword_48</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75573</td>\n",
       "      <td>1</td>\n",
       "      <td>D3</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.253731</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>414</td>\n",
       "      <td>1</td>\n",
       "      <td>D3</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194030</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36755</td>\n",
       "      <td>1</td>\n",
       "      <td>D4</td>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.268657</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>71747</td>\n",
       "      <td>1</td>\n",
       "      <td>D2</td>\n",
       "      <td>26</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.537313</td>\n",
       "      <td>0.781818</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14523</td>\n",
       "      <td>1</td>\n",
       "      <td>E1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.282051</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.432836</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5284</td>\n",
       "      <td>1</td>\n",
       "      <td>D3</td>\n",
       "      <td>10</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.402985</td>\n",
       "      <td>0.581818</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5346</td>\n",
       "      <td>1</td>\n",
       "      <td>D2</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.522388</td>\n",
       "      <td>0.745455</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>45315</td>\n",
       "      <td>1</td>\n",
       "      <td>D4</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.179104</td>\n",
       "      <td>0.672727</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>72719</td>\n",
       "      <td>2</td>\n",
       "      <td>D4</td>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.537313</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>77302</td>\n",
       "      <td>1</td>\n",
       "      <td>D4</td>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.358209</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 128 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  Product_Info_1 Product_Info_2  Product_Info_3  Product_Info_4  \\\n",
       "0  75573               1             D3              26        0.487179   \n",
       "1    414               1             D3              26        0.487179   \n",
       "2  36755               1             D4              26        1.000000   \n",
       "3  71747               1             D2              26        0.897436   \n",
       "4  14523               1             E1              26        0.282051   \n",
       "5   5284               1             D3              10        0.230769   \n",
       "6   5346               1             D2              26        0.487179   \n",
       "7  45315               1             D4              26        0.487179   \n",
       "8  72719               2             D4              26        0.230769   \n",
       "9  77302               1             D4              26        0.076923   \n",
       "\n",
       "   Product_Info_5  Product_Info_6  Product_Info_7   Ins_Age        Ht  ...  \\\n",
       "0               2               1               1  0.253731  0.763636  ...   \n",
       "1               2               3               1  0.194030  0.763636  ...   \n",
       "2               2               1               1  0.268657  0.690909  ...   \n",
       "3               2               3               1  0.537313  0.781818  ...   \n",
       "4               2               1               1  0.432836  0.818182  ...   \n",
       "5               2               3               1  0.402985  0.581818  ...   \n",
       "6               2               3               1  0.522388  0.745455  ...   \n",
       "7               2               1               1  0.179104  0.672727  ...   \n",
       "8               2               3               1  0.537313  0.818182  ...   \n",
       "9               2               3               1  0.358209  0.636364  ...   \n",
       "\n",
       "   Medical_Keyword_40  Medical_Keyword_41  Medical_Keyword_42  \\\n",
       "0                   0                   0                   0   \n",
       "1                   1                   0                   0   \n",
       "2                   0                   0                   0   \n",
       "3                   1                   0                   0   \n",
       "4                   0                   0                   0   \n",
       "5                   0                   0                   0   \n",
       "6                   0                   0                   0   \n",
       "7                   0                   0                   0   \n",
       "8                   0                   0                   0   \n",
       "9                   1                   0                   0   \n",
       "\n",
       "   Medical_Keyword_43  Medical_Keyword_44  Medical_Keyword_45  \\\n",
       "0                   0                   0                   0   \n",
       "1                   0                   0                   0   \n",
       "2                   0                   0                   0   \n",
       "3                   0                   0                   0   \n",
       "4                   0                   0                   0   \n",
       "5                   0                   0                   0   \n",
       "6                   0                   0                   0   \n",
       "7                   0                   0                   0   \n",
       "8                   0                   0                   0   \n",
       "9                   0                   0                   0   \n",
       "\n",
       "   Medical_Keyword_46  Medical_Keyword_47  Medical_Keyword_48  Response  \n",
       "0                   0                   0                   0         0  \n",
       "1                   0                   0                   0         1  \n",
       "2                   0                   0                   0         0  \n",
       "3                   0                   0                   0         1  \n",
       "4                   0                   0                   0         1  \n",
       "5                   0                   0                   0         1  \n",
       "6                   0                   0                   0         0  \n",
       "7                   0                   0                   0         1  \n",
       "8                   0                   0                   1         0  \n",
       "9                   0                   0                   0         0  \n",
       "\n",
       "[10 rows x 128 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('trainCourse.csv')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** How many samples and features that we have in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5938, 128)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Describing data\n",
    "\n",
    "\n",
    "**Q:** Which features are available in the dataset?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'Product_Info_1', 'Product_Info_2', 'Product_Info_3',\n",
       "       'Product_Info_4', 'Product_Info_5', 'Product_Info_6', 'Product_Info_7',\n",
       "       'Ins_Age', 'Ht',\n",
       "       ...\n",
       "       'Medical_Keyword_40', 'Medical_Keyword_41', 'Medical_Keyword_42',\n",
       "       'Medical_Keyword_43', 'Medical_Keyword_44', 'Medical_Keyword_45',\n",
       "       'Medical_Keyword_46', 'Medical_Keyword_47', 'Medical_Keyword_48',\n",
       "       'Response'],\n",
       "      dtype='object', length=128)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Print the global information about the data and the different feature types "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5938 entries, 0 to 5937\n",
      "Data columns (total 128 columns):\n",
      " #   Column               Dtype  \n",
      "---  ------               -----  \n",
      " 0   Id                   int64  \n",
      " 1   Product_Info_1       int64  \n",
      " 2   Product_Info_2       object \n",
      " 3   Product_Info_3       int64  \n",
      " 4   Product_Info_4       float64\n",
      " 5   Product_Info_5       int64  \n",
      " 6   Product_Info_6       int64  \n",
      " 7   Product_Info_7       int64  \n",
      " 8   Ins_Age              float64\n",
      " 9   Ht                   float64\n",
      " 10  Wt                   float64\n",
      " 11  BMI                  float64\n",
      " 12  Employment_Info_1    float64\n",
      " 13  Employment_Info_2    int64  \n",
      " 14  Employment_Info_3    int64  \n",
      " 15  Employment_Info_4    float64\n",
      " 16  Employment_Info_5    int64  \n",
      " 17  Employment_Info_6    float64\n",
      " 18  InsuredInfo_1        int64  \n",
      " 19  InsuredInfo_2        int64  \n",
      " 20  InsuredInfo_3        int64  \n",
      " 21  InsuredInfo_4        int64  \n",
      " 22  InsuredInfo_5        int64  \n",
      " 23  InsuredInfo_6        int64  \n",
      " 24  InsuredInfo_7        int64  \n",
      " 25  Insurance_History_1  int64  \n",
      " 26  Insurance_History_2  int64  \n",
      " 27  Insurance_History_3  int64  \n",
      " 28  Insurance_History_4  int64  \n",
      " 29  Insurance_History_5  float64\n",
      " 30  Insurance_History_7  int64  \n",
      " 31  Insurance_History_8  int64  \n",
      " 32  Insurance_History_9  int64  \n",
      " 33  Family_Hist_1        int64  \n",
      " 34  Family_Hist_2        float64\n",
      " 35  Family_Hist_3        float64\n",
      " 36  Family_Hist_4        float64\n",
      " 37  Family_Hist_5        float64\n",
      " 38  Medical_History_1    float64\n",
      " 39  Medical_History_2    int64  \n",
      " 40  Medical_History_3    int64  \n",
      " 41  Medical_History_4    int64  \n",
      " 42  Medical_History_5    int64  \n",
      " 43  Medical_History_6    int64  \n",
      " 44  Medical_History_7    int64  \n",
      " 45  Medical_History_8    int64  \n",
      " 46  Medical_History_9    int64  \n",
      " 47  Medical_History_10   float64\n",
      " 48  Medical_History_11   int64  \n",
      " 49  Medical_History_12   int64  \n",
      " 50  Medical_History_13   int64  \n",
      " 51  Medical_History_14   int64  \n",
      " 52  Medical_History_15   float64\n",
      " 53  Medical_History_16   int64  \n",
      " 54  Medical_History_17   int64  \n",
      " 55  Medical_History_18   int64  \n",
      " 56  Medical_History_19   int64  \n",
      " 57  Medical_History_20   int64  \n",
      " 58  Medical_History_21   int64  \n",
      " 59  Medical_History_22   int64  \n",
      " 60  Medical_History_23   int64  \n",
      " 61  Medical_History_24   float64\n",
      " 62  Medical_History_25   int64  \n",
      " 63  Medical_History_26   int64  \n",
      " 64  Medical_History_27   int64  \n",
      " 65  Medical_History_28   int64  \n",
      " 66  Medical_History_29   int64  \n",
      " 67  Medical_History_30   int64  \n",
      " 68  Medical_History_31   int64  \n",
      " 69  Medical_History_32   float64\n",
      " 70  Medical_History_33   int64  \n",
      " 71  Medical_History_34   int64  \n",
      " 72  Medical_History_35   int64  \n",
      " 73  Medical_History_36   int64  \n",
      " 74  Medical_History_37   int64  \n",
      " 75  Medical_History_38   int64  \n",
      " 76  Medical_History_39   int64  \n",
      " 77  Medical_History_40   int64  \n",
      " 78  Medical_History_41   int64  \n",
      " 79  Medical_Keyword_1    int64  \n",
      " 80  Medical_Keyword_2    int64  \n",
      " 81  Medical_Keyword_3    int64  \n",
      " 82  Medical_Keyword_4    int64  \n",
      " 83  Medical_Keyword_5    int64  \n",
      " 84  Medical_Keyword_6    int64  \n",
      " 85  Medical_Keyword_7    int64  \n",
      " 86  Medical_Keyword_8    int64  \n",
      " 87  Medical_Keyword_9    int64  \n",
      " 88  Medical_Keyword_10   int64  \n",
      " 89  Medical_Keyword_11   int64  \n",
      " 90  Medical_Keyword_12   int64  \n",
      " 91  Medical_Keyword_13   int64  \n",
      " 92  Medical_Keyword_14   int64  \n",
      " 93  Medical_Keyword_15   int64  \n",
      " 94  Medical_Keyword_16   int64  \n",
      " 95  Medical_Keyword_17   int64  \n",
      " 96  Medical_Keyword_18   int64  \n",
      " 97  Medical_Keyword_19   int64  \n",
      " 98  Medical_Keyword_20   int64  \n",
      " 99  Medical_Keyword_21   int64  \n",
      " 100 Medical_Keyword_22   int64  \n",
      " 101 Medical_Keyword_23   int64  \n",
      " 102 Medical_Keyword_24   int64  \n",
      " 103 Medical_Keyword_25   int64  \n",
      " 104 Medical_Keyword_26   int64  \n",
      " 105 Medical_Keyword_27   int64  \n",
      " 106 Medical_Keyword_28   int64  \n",
      " 107 Medical_Keyword_29   int64  \n",
      " 108 Medical_Keyword_30   int64  \n",
      " 109 Medical_Keyword_31   int64  \n",
      " 110 Medical_Keyword_32   int64  \n",
      " 111 Medical_Keyword_33   int64  \n",
      " 112 Medical_Keyword_34   int64  \n",
      " 113 Medical_Keyword_35   int64  \n",
      " 114 Medical_Keyword_36   int64  \n",
      " 115 Medical_Keyword_37   int64  \n",
      " 116 Medical_Keyword_38   int64  \n",
      " 117 Medical_Keyword_39   int64  \n",
      " 118 Medical_Keyword_40   int64  \n",
      " 119 Medical_Keyword_41   int64  \n",
      " 120 Medical_Keyword_42   int64  \n",
      " 121 Medical_Keyword_43   int64  \n",
      " 122 Medical_Keyword_44   int64  \n",
      " 123 Medical_Keyword_45   int64  \n",
      " 124 Medical_Keyword_46   int64  \n",
      " 125 Medical_Keyword_47   int64  \n",
      " 126 Medical_Keyword_48   int64  \n",
      " 127 Response             int64  \n",
      "dtypes: float64(18), int64(109), object(1)\n",
      "memory usage: 5.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info(verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Which features are categorical?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Product_Info_2\n",
       "count            5938\n",
       "unique             19\n",
       "top                D3\n",
       "freq             1456"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>D4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5933</th>\n",
       "      <td>A8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5934</th>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5935</th>\n",
       "      <td>D4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5936</th>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5937</th>\n",
       "      <td>E1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5938 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Product_Info_2\n",
       "0                D3\n",
       "1                D3\n",
       "2                D4\n",
       "3                D2\n",
       "4                E1\n",
       "...             ...\n",
       "5933             A8\n",
       "5934             D3\n",
       "5935             D4\n",
       "5936             D3\n",
       "5937             E1\n",
       "\n",
       "[5938 rows x 1 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select columns of type 'O'\n",
    "df.select_dtypes(include='O')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Which features are numerical?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>...</th>\n",
       "      <th>Medical_Keyword_40</th>\n",
       "      <th>Medical_Keyword_41</th>\n",
       "      <th>Medical_Keyword_42</th>\n",
       "      <th>Medical_Keyword_43</th>\n",
       "      <th>Medical_Keyword_44</th>\n",
       "      <th>Medical_Keyword_45</th>\n",
       "      <th>Medical_Keyword_46</th>\n",
       "      <th>Medical_Keyword_47</th>\n",
       "      <th>Medical_Keyword_48</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>39721.078309</td>\n",
       "      <td>1.026271</td>\n",
       "      <td>24.534187</td>\n",
       "      <td>0.331447</td>\n",
       "      <td>2.006399</td>\n",
       "      <td>2.684742</td>\n",
       "      <td>1.046817</td>\n",
       "      <td>0.406994</td>\n",
       "      <td>0.707906</td>\n",
       "      <td>0.295191</td>\n",
       "      <td>...</td>\n",
       "      <td>0.061637</td>\n",
       "      <td>0.011283</td>\n",
       "      <td>0.046817</td>\n",
       "      <td>0.010273</td>\n",
       "      <td>0.007915</td>\n",
       "      <td>0.013304</td>\n",
       "      <td>0.008926</td>\n",
       "      <td>0.016335</td>\n",
       "      <td>0.053722</td>\n",
       "      <td>0.747727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22667.022094</td>\n",
       "      <td>0.159955</td>\n",
       "      <td>4.900897</td>\n",
       "      <td>0.283566</td>\n",
       "      <td>0.079747</td>\n",
       "      <td>0.728847</td>\n",
       "      <td>0.302420</td>\n",
       "      <td>0.197635</td>\n",
       "      <td>0.074145</td>\n",
       "      <td>0.089481</td>\n",
       "      <td>...</td>\n",
       "      <td>0.240515</td>\n",
       "      <td>0.105631</td>\n",
       "      <td>0.211265</td>\n",
       "      <td>0.100841</td>\n",
       "      <td>0.088622</td>\n",
       "      <td>0.114583</td>\n",
       "      <td>0.094061</td>\n",
       "      <td>0.126773</td>\n",
       "      <td>0.225487</td>\n",
       "      <td>0.434354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.069038</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20631.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.238806</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.232218</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>39505.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.402985</td>\n",
       "      <td>0.709091</td>\n",
       "      <td>0.288703</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>58965.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.567164</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.351464</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79146.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.925373</td>\n",
       "      <td>0.963636</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 127 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Id  Product_Info_1  Product_Info_3  Product_Info_4  \\\n",
       "count   5938.000000     5938.000000     5938.000000     5938.000000   \n",
       "mean   39721.078309        1.026271       24.534187        0.331447   \n",
       "std    22667.022094        0.159955        4.900897        0.283566   \n",
       "min       18.000000        1.000000        4.000000        0.000000   \n",
       "25%    20631.500000        1.000000       26.000000        0.076923   \n",
       "50%    39505.500000        1.000000       26.000000        0.230769   \n",
       "75%    58965.000000        1.000000       26.000000        0.487179   \n",
       "max    79146.000000        2.000000       37.000000        1.000000   \n",
       "\n",
       "       Product_Info_5  Product_Info_6  Product_Info_7      Ins_Age  \\\n",
       "count     5938.000000     5938.000000     5938.000000  5938.000000   \n",
       "mean         2.006399        2.684742        1.046817     0.406994   \n",
       "std          0.079747        0.728847        0.302420     0.197635   \n",
       "min          2.000000        1.000000        1.000000     0.000000   \n",
       "25%          2.000000        3.000000        1.000000     0.238806   \n",
       "50%          2.000000        3.000000        1.000000     0.402985   \n",
       "75%          2.000000        3.000000        1.000000     0.567164   \n",
       "max          3.000000        3.000000        3.000000     0.925373   \n",
       "\n",
       "                Ht           Wt  ...  Medical_Keyword_40  Medical_Keyword_41  \\\n",
       "count  5938.000000  5938.000000  ...         5938.000000         5938.000000   \n",
       "mean      0.707906     0.295191  ...            0.061637            0.011283   \n",
       "std       0.074145     0.089481  ...            0.240515            0.105631   \n",
       "min       0.400000     0.069038  ...            0.000000            0.000000   \n",
       "25%       0.654545     0.232218  ...            0.000000            0.000000   \n",
       "50%       0.709091     0.288703  ...            0.000000            0.000000   \n",
       "75%       0.763636     0.351464  ...            0.000000            0.000000   \n",
       "max       0.963636     1.000000  ...            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_42  Medical_Keyword_43  Medical_Keyword_44  \\\n",
       "count         5938.000000         5938.000000         5938.000000   \n",
       "mean             0.046817            0.010273            0.007915   \n",
       "std              0.211265            0.100841            0.088622   \n",
       "min              0.000000            0.000000            0.000000   \n",
       "25%              0.000000            0.000000            0.000000   \n",
       "50%              0.000000            0.000000            0.000000   \n",
       "75%              0.000000            0.000000            0.000000   \n",
       "max              1.000000            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_45  Medical_Keyword_46  Medical_Keyword_47  \\\n",
       "count         5938.000000         5938.000000         5938.000000   \n",
       "mean             0.013304            0.008926            0.016335   \n",
       "std              0.114583            0.094061            0.126773   \n",
       "min              0.000000            0.000000            0.000000   \n",
       "25%              0.000000            0.000000            0.000000   \n",
       "50%              0.000000            0.000000            0.000000   \n",
       "75%              0.000000            0.000000            0.000000   \n",
       "max              1.000000            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_48     Response  \n",
       "count         5938.000000  5938.000000  \n",
       "mean             0.053722     0.747727  \n",
       "std              0.225487     0.434354  \n",
       "min              0.000000     0.000000  \n",
       "25%              0.000000     0.000000  \n",
       "50%              0.000000     1.000000  \n",
       "75%              0.000000     1.000000  \n",
       "max              1.000000     1.000000  \n",
       "\n",
       "[8 rows x 127 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(exclude='O')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>...</th>\n",
       "      <th>Medical_Keyword_40</th>\n",
       "      <th>Medical_Keyword_41</th>\n",
       "      <th>Medical_Keyword_42</th>\n",
       "      <th>Medical_Keyword_43</th>\n",
       "      <th>Medical_Keyword_44</th>\n",
       "      <th>Medical_Keyword_45</th>\n",
       "      <th>Medical_Keyword_46</th>\n",
       "      <th>Medical_Keyword_47</th>\n",
       "      <th>Medical_Keyword_48</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75573</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.253731</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.267782</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>414</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194030</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.278243</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36755</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.268657</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.282427</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>71747</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.537313</td>\n",
       "      <td>0.781818</td>\n",
       "      <td>0.320084</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14523</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.282051</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.432836</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.351464</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5933</th>\n",
       "      <td>52081</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.641791</td>\n",
       "      <td>0.745455</td>\n",
       "      <td>0.320084</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5934</th>\n",
       "      <td>39314</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.432836</td>\n",
       "      <td>0.672727</td>\n",
       "      <td>0.393305</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5935</th>\n",
       "      <td>45181</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.298507</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.246862</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5936</th>\n",
       "      <td>42880</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.462687</td>\n",
       "      <td>0.781818</td>\n",
       "      <td>0.309623</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5937</th>\n",
       "      <td>58055</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.626866</td>\n",
       "      <td>0.836364</td>\n",
       "      <td>0.456067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5938 rows × 127 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Id  Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "0     75573               1              26        0.487179               2   \n",
       "1       414               1              26        0.487179               2   \n",
       "2     36755               1              26        1.000000               2   \n",
       "3     71747               1              26        0.897436               2   \n",
       "4     14523               1              26        0.282051               2   \n",
       "...     ...             ...             ...             ...             ...   \n",
       "5933  52081               1              26        0.025641               2   \n",
       "5934  39314               1              26        0.076923               2   \n",
       "5935  45181               1              26        1.000000               2   \n",
       "5936  42880               1              26        0.230769               2   \n",
       "5937  58055               1              26        0.128205               2   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt  ...  \\\n",
       "0                  1               1  0.253731  0.763636  0.267782  ...   \n",
       "1                  3               1  0.194030  0.763636  0.278243  ...   \n",
       "2                  1               1  0.268657  0.690909  0.282427  ...   \n",
       "3                  3               1  0.537313  0.781818  0.320084  ...   \n",
       "4                  1               1  0.432836  0.818182  0.351464  ...   \n",
       "...              ...             ...       ...       ...       ...  ...   \n",
       "5933               1               1  0.641791  0.745455  0.320084  ...   \n",
       "5934               3               1  0.432836  0.672727  0.393305  ...   \n",
       "5935               3               1  0.298507  0.690909  0.246862  ...   \n",
       "5936               3               1  0.462687  0.781818  0.309623  ...   \n",
       "5937               3               1  0.626866  0.836364  0.456067  ...   \n",
       "\n",
       "      Medical_Keyword_40  Medical_Keyword_41  Medical_Keyword_42  \\\n",
       "0                      0                   0                   0   \n",
       "1                      1                   0                   0   \n",
       "2                      0                   0                   0   \n",
       "3                      1                   0                   0   \n",
       "4                      0                   0                   0   \n",
       "...                  ...                 ...                 ...   \n",
       "5933                   0                   0                   0   \n",
       "5934                   0                   0                   0   \n",
       "5935                   0                   0                   0   \n",
       "5936                   0                   0                   0   \n",
       "5937                   0                   0                   0   \n",
       "\n",
       "      Medical_Keyword_43  Medical_Keyword_44  Medical_Keyword_45  \\\n",
       "0                      0                   0                   0   \n",
       "1                      0                   0                   0   \n",
       "2                      0                   0                   0   \n",
       "3                      0                   0                   0   \n",
       "4                      0                   0                   0   \n",
       "...                  ...                 ...                 ...   \n",
       "5933                   0                   0                   0   \n",
       "5934                   0                   0                   0   \n",
       "5935                   0                   0                   1   \n",
       "5936                   0                   0                   0   \n",
       "5937                   0                   0                   0   \n",
       "\n",
       "      Medical_Keyword_46  Medical_Keyword_47  Medical_Keyword_48  Response  \n",
       "0                      0                   0                   0         0  \n",
       "1                      0                   0                   0         1  \n",
       "2                      0                   0                   0         0  \n",
       "3                      0                   0                   0         1  \n",
       "4                      0                   0                   0         1  \n",
       "...                  ...                 ...                 ...       ...  \n",
       "5933                   0                   0                   1         0  \n",
       "5934                   0                   1                   0         0  \n",
       "5935                   0                   0                   0         1  \n",
       "5936                   0                   0                   0         1  \n",
       "5937                   0                   0                   0         0  \n",
       "\n",
       "[5938 rows x 127 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(exclude='O')\n",
    "\n",
    "#df.describe(include=[np.number])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** The Id Variable is it a variable that you can use in machine learning? Print the number of unique value of Id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     5938.000000\n",
       "mean     39721.078309\n",
       "std      22667.022094\n",
       "min         18.000000\n",
       "25%      20631.500000\n",
       "50%      39505.500000\n",
       "75%      58965.000000\n",
       "max      79146.000000\n",
       "Name: Id, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Id'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5938"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.Id.unique())\n",
    "df['Id'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5938 instances and all of them are unique so we can drop this variable and for that we will use the **drop** function from Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('Id',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5938, 127)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### 1.3 Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** **What is the distribution of numerical feature values across the samples?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Medical_Keyword_40</th>\n",
       "      <th>Medical_Keyword_41</th>\n",
       "      <th>Medical_Keyword_42</th>\n",
       "      <th>Medical_Keyword_43</th>\n",
       "      <th>Medical_Keyword_44</th>\n",
       "      <th>Medical_Keyword_45</th>\n",
       "      <th>Medical_Keyword_46</th>\n",
       "      <th>Medical_Keyword_47</th>\n",
       "      <th>Medical_Keyword_48</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "      <td>5938.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.026271</td>\n",
       "      <td>24.534187</td>\n",
       "      <td>0.331447</td>\n",
       "      <td>2.006399</td>\n",
       "      <td>2.684742</td>\n",
       "      <td>1.046817</td>\n",
       "      <td>0.406994</td>\n",
       "      <td>0.707906</td>\n",
       "      <td>0.295191</td>\n",
       "      <td>0.473208</td>\n",
       "      <td>...</td>\n",
       "      <td>0.061637</td>\n",
       "      <td>0.011283</td>\n",
       "      <td>0.046817</td>\n",
       "      <td>0.010273</td>\n",
       "      <td>0.007915</td>\n",
       "      <td>0.013304</td>\n",
       "      <td>0.008926</td>\n",
       "      <td>0.016335</td>\n",
       "      <td>0.053722</td>\n",
       "      <td>0.747727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.159955</td>\n",
       "      <td>4.900897</td>\n",
       "      <td>0.283566</td>\n",
       "      <td>0.079747</td>\n",
       "      <td>0.728847</td>\n",
       "      <td>0.302420</td>\n",
       "      <td>0.197635</td>\n",
       "      <td>0.074145</td>\n",
       "      <td>0.089481</td>\n",
       "      <td>0.121807</td>\n",
       "      <td>...</td>\n",
       "      <td>0.240515</td>\n",
       "      <td>0.105631</td>\n",
       "      <td>0.211265</td>\n",
       "      <td>0.100841</td>\n",
       "      <td>0.088622</td>\n",
       "      <td>0.114583</td>\n",
       "      <td>0.094061</td>\n",
       "      <td>0.126773</td>\n",
       "      <td>0.225487</td>\n",
       "      <td>0.434354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.069038</td>\n",
       "      <td>0.058838</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.238806</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.232218</td>\n",
       "      <td>0.390578</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.402985</td>\n",
       "      <td>0.709091</td>\n",
       "      <td>0.288703</td>\n",
       "      <td>0.457590</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.487179</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.567164</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.351464</td>\n",
       "      <td>0.534355</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.925373</td>\n",
       "      <td>0.963636</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 126 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "count     5938.000000     5938.000000     5938.000000     5938.000000   \n",
       "mean         1.026271       24.534187        0.331447        2.006399   \n",
       "std          0.159955        4.900897        0.283566        0.079747   \n",
       "min          1.000000        4.000000        0.000000        2.000000   \n",
       "25%          1.000000       26.000000        0.076923        2.000000   \n",
       "50%          1.000000       26.000000        0.230769        2.000000   \n",
       "75%          1.000000       26.000000        0.487179        2.000000   \n",
       "max          2.000000       37.000000        1.000000        3.000000   \n",
       "\n",
       "       Product_Info_6  Product_Info_7      Ins_Age           Ht           Wt  \\\n",
       "count     5938.000000     5938.000000  5938.000000  5938.000000  5938.000000   \n",
       "mean         2.684742        1.046817     0.406994     0.707906     0.295191   \n",
       "std          0.728847        0.302420     0.197635     0.074145     0.089481   \n",
       "min          1.000000        1.000000     0.000000     0.400000     0.069038   \n",
       "25%          3.000000        1.000000     0.238806     0.654545     0.232218   \n",
       "50%          3.000000        1.000000     0.402985     0.709091     0.288703   \n",
       "75%          3.000000        1.000000     0.567164     0.763636     0.351464   \n",
       "max          3.000000        3.000000     0.925373     0.963636     1.000000   \n",
       "\n",
       "               BMI  ...  Medical_Keyword_40  Medical_Keyword_41  \\\n",
       "count  5938.000000  ...         5938.000000         5938.000000   \n",
       "mean      0.473208  ...            0.061637            0.011283   \n",
       "std       0.121807  ...            0.240515            0.105631   \n",
       "min       0.058838  ...            0.000000            0.000000   \n",
       "25%       0.390578  ...            0.000000            0.000000   \n",
       "50%       0.457590  ...            0.000000            0.000000   \n",
       "75%       0.534355  ...            0.000000            0.000000   \n",
       "max       1.000000  ...            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_42  Medical_Keyword_43  Medical_Keyword_44  \\\n",
       "count         5938.000000         5938.000000         5938.000000   \n",
       "mean             0.046817            0.010273            0.007915   \n",
       "std              0.211265            0.100841            0.088622   \n",
       "min              0.000000            0.000000            0.000000   \n",
       "25%              0.000000            0.000000            0.000000   \n",
       "50%              0.000000            0.000000            0.000000   \n",
       "75%              0.000000            0.000000            0.000000   \n",
       "max              1.000000            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_45  Medical_Keyword_46  Medical_Keyword_47  \\\n",
       "count         5938.000000         5938.000000         5938.000000   \n",
       "mean             0.013304            0.008926            0.016335   \n",
       "std              0.114583            0.094061            0.126773   \n",
       "min              0.000000            0.000000            0.000000   \n",
       "25%              0.000000            0.000000            0.000000   \n",
       "50%              0.000000            0.000000            0.000000   \n",
       "75%              0.000000            0.000000            0.000000   \n",
       "max              1.000000            1.000000            1.000000   \n",
       "\n",
       "       Medical_Keyword_48     Response  \n",
       "count         5938.000000  5938.000000  \n",
       "mean             0.053722     0.747727  \n",
       "std              0.225487     0.434354  \n",
       "min              0.000000     0.000000  \n",
       "25%              0.000000     0.000000  \n",
       "50%              0.000000     1.000000  \n",
       "75%              0.000000     1.000000  \n",
       "max              1.000000     1.000000  \n",
       "\n",
       "[8 rows x 126 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** are there missing values in the data? How many? give the ratio for each feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Employment_Info_4      5251\n",
       "Employment_Info_6      4860\n",
       "Insurance_History_5    3386\n",
       "Family_Hist_2          3027\n",
       "Family_Hist_3          2528\n",
       "Family_Hist_4          4036\n",
       "Family_Hist_5          1741\n",
       "Medical_History_1      5053\n",
       "Medical_History_10       62\n",
       "Medical_History_15     1515\n",
       "Medical_History_24      385\n",
       "Medical_History_32      122\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Way 1 : no nan data\n",
    "df.notnull().sum()[df.notnull().sum() < df.shape[0]] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Employment_Info_4       687\n",
       "Employment_Info_6      1078\n",
       "Insurance_History_5    2552\n",
       "Family_Hist_2          2911\n",
       "Family_Hist_3          3410\n",
       "Family_Hist_4          1902\n",
       "Family_Hist_5          4197\n",
       "Medical_History_1       885\n",
       "Medical_History_10     5876\n",
       "Medical_History_15     4423\n",
       "Medical_History_24     5553\n",
       "Medical_History_32     5816\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Way 2 : only nan data\n",
    "df.isnull().sum()[df.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ratio\n",
    "len(df.isnull().sum()[df.isnull().sum() >0]/df.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Now let's look at the variable that we are interested in predicting ** the Y variable ** which is **Response**. Using the count function, display the class imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.747727\n",
       "0    0.252273\n",
       "Name: Response, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Response.value_counts()/df.shape[0]\n",
    "df['Response'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  2 Exploratory Data Analysis\n",
    "\n",
    "We arrive at following assumptions based on data analysis done so far. We may validate these assumptions further before taking appropriate actions.\n",
    "\n",
    "* **Correlating.**: We want to know how well does each feature correlate with Survival. \n",
    "* **Completing.** : We want to complete missing values\n",
    "* **Correcting.**: We want de drop some features\n",
    "* **Creating.**: We want to creat new features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Draw a big picture of the data using ProfileReport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting https://github.com/pandas-profiling/pandas-profiling/archive/master.zip\n",
      "  Downloading https://github.com/pandas-profiling/pandas-profiling/archive/master.zip\n",
      "Requirement already satisfied: joblib in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (0.14.1)\n",
      "Requirement already satisfied: scipy>=1.4.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (1.4.1)\n",
      "Requirement already satisfied: pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (1.0.3)\n",
      "Requirement already satisfied: matplotlib>=3.2.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (3.2.1)\n",
      "Collecting confuse>=1.0.0 (from pandas-profiling==2.8.0)\n",
      "Requirement already satisfied: jinja2>=2.11.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (2.11.2)\n",
      "Collecting visions[type_image_path]==0.4.4 (from pandas-profiling==2.8.0)\n",
      "  Downloading https://files.pythonhosted.org/packages/4a/03/5a45d542257830cf1d9da2cdc1c0bc6f55a9212937b70fdd6d7031b46d6c/visions-0.4.4-py3-none-any.whl (59kB)\n",
      "Requirement already satisfied: numpy>=1.16.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (1.16.5)\n",
      "Collecting htmlmin>=0.1.12 (from pandas-profiling==2.8.0)\n",
      "Collecting missingno>=0.4.2 (from pandas-profiling==2.8.0)\n",
      "  Using cached https://files.pythonhosted.org/packages/2b/de/6e4dd6d720c49939544352155dc06a08c9f7e4271aa631a559dfbeaaf9d4/missingno-0.4.2-py3-none-any.whl\n",
      "Collecting phik>=0.9.10 (from pandas-profiling==2.8.0)\n",
      "  Downloading https://files.pythonhosted.org/packages/01/5a/7ef1c04ce62cd72f900c06298dc2385840550d5c653a0dbc19109a5477e6/phik-0.10.0-py3-none-any.whl (599kB)\n",
      "Requirement already satisfied: astropy>=4.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (4.0.1.post1)\n",
      "Collecting tangled-up-in-unicode>=0.0.6 (from pandas-profiling==2.8.0)\n",
      "  Downloading https://files.pythonhosted.org/packages/4a/e2/e588ab9298d4989ce7fdb2b97d18aac878d99dbdc379a4476a09d9271b68/tangled_up_in_unicode-0.0.6-py3-none-any.whl (3.1MB)\n",
      "Requirement already satisfied: requests>=2.23.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (2.23.0)\n",
      "Requirement already satisfied: tqdm>=4.43.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (4.45.0)\n",
      "Requirement already satisfied: ipywidgets>=7.5.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas-profiling==2.8.0) (7.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.8.0) (2.8.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.8.0) (2019.3)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from matplotlib>=3.2.0->pandas-profiling==2.8.0) (2.4.2)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from matplotlib>=3.2.0->pandas-profiling==2.8.0) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from matplotlib>=3.2.0->pandas-profiling==2.8.0) (1.1.0)\n",
      "Requirement already satisfied: pyyaml in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from confuse>=1.0.0->pandas-profiling==2.8.0) (5.1.2)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from jinja2>=2.11.1->pandas-profiling==2.8.0) (1.1.1)\n",
      "Requirement already satisfied: attrs>=19.3.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.8.0) (19.3.0)\n",
      "Requirement already satisfied: networkx>=2.4 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.8.0) (2.4)\n",
      "Collecting imagehash; extra == \"type_image_path\" (from visions[type_image_path]==0.4.4->pandas-profiling==2.8.0)\n",
      "  Downloading https://files.pythonhosted.org/packages/1a/5d/cc81830be3c4705a46cdbca74439b67f1017881383ba0127c41c4cecb7b3/ImageHash-4.1.0.tar.gz (291kB)\n",
      "Requirement already satisfied: Pillow; extra == \"type_image_path\" in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.8.0) (6.2.0)\n",
      "Requirement already satisfied: seaborn in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from missingno>=0.4.2->pandas-profiling==2.8.0) (0.9.0)\n",
      "Requirement already satisfied: numba>=0.38.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from phik>=0.9.10->pandas-profiling==2.8.0) (0.45.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from requests>=2.23.0->pandas-profiling==2.8.0) (2020.4.5.1)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from requests>=2.23.0->pandas-profiling==2.8.0) (1.24.2)\n",
      "Requirement already satisfied: idna<3,>=2.5 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from requests>=2.23.0->pandas-profiling==2.8.0) (2.8)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from requests>=2.23.0->pandas-profiling==2.8.0) (3.0.4)\n",
      "Requirement already satisfied: traitlets>=4.3.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipywidgets>=7.5.1->pandas-profiling==2.8.0) (4.3.3)\n",
      "Requirement already satisfied: nbformat>=4.2.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipywidgets>=7.5.1->pandas-profiling==2.8.0) (4.4.0)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipywidgets>=7.5.1->pandas-profiling==2.8.0) (5.1.2)\n",
      "Requirement already satisfied: widgetsnbextension~=3.5.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipywidgets>=7.5.1->pandas-profiling==2.8.0) (3.5.1)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipywidgets>=7.5.1->pandas-profiling==2.8.0) (7.8.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from python-dateutil>=2.6.1->pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.8.0) (1.12.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from kiwisolver>=1.0.1->matplotlib>=3.2.0->pandas-profiling==2.8.0) (41.4.0)\n",
      "Requirement already satisfied: decorator>=4.3.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from networkx>=2.4->visions[type_image_path]==0.4.4->pandas-profiling==2.8.0) (4.4.0)\n",
      "Requirement already satisfied: PyWavelets in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from imagehash; extra == \"type_image_path\"->visions[type_image_path]==0.4.4->pandas-profiling==2.8.0) (1.0.3)\n",
      "Requirement already satisfied: llvmlite>=0.29.0dev0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from numba>=0.38.1->phik>=0.9.10->pandas-profiling==2.8.0) (0.29.0)\n",
      "Requirement already satisfied: ipython-genutils in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from traitlets>=4.3.1->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.2.0)\n",
      "Requirement already satisfied: jupyter-core in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbformat>=4.2.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (4.5.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbformat>=4.2.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (3.0.2)\n",
      "Requirement already satisfied: tornado>=4.2 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (6.0.3)\n",
      "Requirement already satisfied: jupyter-client in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (5.3.3)\n",
      "Requirement already satisfied: notebook>=4.4.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (6.0.1)\n",
      "Requirement already satisfied: colorama; sys_platform == \"win32\" in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.4.1)\n",
      "Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (2.0.10)\n",
      "Requirement already satisfied: backcall in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.1.0)\n",
      "Requirement already satisfied: pygments in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (2.4.2)\n",
      "Requirement already satisfied: jedi>=0.10 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.15.1)\n",
      "Requirement already satisfied: pickleshare in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.7.5)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.15.4)\n",
      "Requirement already satisfied: pywin32>=1.0; sys_platform == \"win32\" in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (223)\n",
      "Requirement already satisfied: pyzmq>=13 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (18.1.0)\n",
      "Requirement already satisfied: Send2Trash in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (1.5.0)\n",
      "Requirement already satisfied: terminado>=0.8.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.8.2)\n",
      "Requirement already satisfied: prometheus-client in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.7.1)\n",
      "Requirement already satisfied: nbconvert in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (5.6.0)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.1.7)\n",
      "Requirement already satisfied: parso>=0.5.0 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.5.1)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (1.4.2)\n",
      "Requirement already satisfied: testpath in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.4.2)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.8.4)\n",
      "Requirement already satisfied: bleach in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (3.1.0)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.3)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.6.0)\n",
      "Requirement already satisfied: webencodings in c:\\users\\oualisoufiane\\anaconda3\\lib\\site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.8.0) (0.5.1)\n",
      "Building wheels for collected packages: pandas-profiling, imagehash\n",
      "  Building wheel for pandas-profiling (setup.py): started\n",
      "  Building wheel for pandas-profiling (setup.py): finished with status 'done'\n",
      "  Created wheel for pandas-profiling: filename=pandas_profiling-2.8.0-py2.py3-none-any.whl size=259938 sha256=70abc3fe84569253540781594e606eee347bb9a5c85501d74382618d00c06e18\n",
      "  Stored in directory: C:\\Users\\OUALIS~1\\AppData\\Local\\Temp\\pip-ephem-wheel-cache-zdj5umae\\wheels\\56\\c2\\dd\\8d945b0443c35df7d5f62fa9e9ae105a2d8b286302b92e0109\n",
      "  Building wheel for imagehash (setup.py): started\n",
      "  Building wheel for imagehash (setup.py): finished with status 'done'\n",
      "  Created wheel for imagehash: filename=ImageHash-4.1.0-py2.py3-none-any.whl size=291997 sha256=1637468f7d92ad58865fedbd6a34d7948e66b2488ffae3d9ef59e3fe799f853c\n",
      "  Stored in directory: C:\\Users\\OualiSoufiane\\AppData\\Local\\pip\\Cache\\wheels\\07\\1c\\dc\\6831446f09feb8cc199ec73a0f2f0703253f6ae013a22f4be9\n",
      "Successfully built pandas-profiling imagehash\n",
      "Installing collected packages: confuse, tangled-up-in-unicode, imagehash, visions, htmlmin, missingno, phik, pandas-profiling\n",
      "  Found existing installation: pandas-profiling 1.4.1\n",
      "    Uninstalling pandas-profiling-1.4.1:\n",
      "      Successfully uninstalled pandas-profiling-1.4.1\n",
      "Successfully installed confuse-1.1.0 htmlmin-0.1.12 imagehash-4.1.0 missingno-0.4.2 pandas-profiling-2.8.0 phik-0.10.0 tangled-up-in-unicode-0.0.6 visions-0.4.4\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# profile = ProfileReport(df, title='Life Insurance', html={'style':{'full_width':True}})\n",
    "profile = ProfileReport(df, title='Pandas Profiling Report', explorative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "041e951a180a480e9f636b9dfbbef3a8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Summarize dataset', max=141.0, style=ProgressStyle(descri…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0a53a86598ae40e1aeca75b9839e2bfd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Generate report structure', max=1.0, style=ProgressStyle(…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b678e758f7204a1781d7a06c43ef13d9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Render widgets', max=1.0, style=ProgressStyle(description…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36mget\u001b[1;34m(self, obj, cls)\u001b[0m\n\u001b[0;32m    527\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 528\u001b[1;33m             \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_values\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    529\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'layout'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mStopIteration\u001b[0m                             Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[1;34m(self, type, value, traceback)\u001b[0m\n\u001b[0;32m    118\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 119\u001b[1;33m                 \u001b[0mnext\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    120\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mStopIteration\u001b[0m: ",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-16-1055f09e4b48>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprofile\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_widgets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\profile_report.py\u001b[0m in \u001b[0;36mto_widgets\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    391\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    392\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 393\u001b[1;33m         \u001b[0mdisplay\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwidgets\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    394\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    395\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_repr_html_\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\profile_report.py\u001b[0m in \u001b[0;36mwidgets\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    178\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mwidgets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    179\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_widgets\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 180\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_widgets\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_render_widgets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    181\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_widgets\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    182\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\profile_report.py\u001b[0m in \u001b[0;36m_render_widgets\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    307\u001b[0m             \u001b[0mtotal\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdesc\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"Render widgets\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdisable\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdisable_progress_bar\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleave\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    308\u001b[0m         ) as pbar:\n\u001b[1;32m--> 309\u001b[1;33m             \u001b[0mwidgets\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mWidgetReport\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mreport\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    310\u001b[0m             \u001b[0mpbar\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    311\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mwidgets\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\root.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m         return widgets.VBox(\n\u001b[1;32m----> 9\u001b[1;33m             \u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"body\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"footer\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     10\u001b[0m         )\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     77\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_named_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     78\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"tabs\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"sections\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 79\u001b[1;33m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_tabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     80\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"accordion\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     81\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_accordion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mget_tabs\u001b[1;34m(items)\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0mtitles\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m         \u001b[0mchildren\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m         \u001b[0mtitles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mget_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     79\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_tabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     80\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"accordion\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 81\u001b[1;33m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_accordion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     82\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"grid\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     83\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_row\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mget_accordion\u001b[1;34m(items)\u001b[0m\n\u001b[0;32m     60\u001b[0m     \u001b[0mtitles\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 62\u001b[1;33m         \u001b[0mchildren\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     63\u001b[0m         \u001b[0mtitles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mget_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\variable.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m      9\u001b[0m         \u001b[0mitems\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"top\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"bottom\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m             \u001b[0mitems\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"bottom\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mwidgets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mVBox\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\collapse.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m         \u001b[0mtoggle\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"button\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m         \u001b[0mitem\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"item\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcollapse\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"correlation\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     77\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_named_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     78\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"tabs\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"sections\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 79\u001b[1;33m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_tabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     80\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"accordion\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     81\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_accordion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mget_tabs\u001b[1;34m(items)\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0mtitles\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m         \u001b[0mchildren\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m         \u001b[0mtitles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mget_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     77\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_named_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     78\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"tabs\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"sections\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 79\u001b[1;33m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_tabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     80\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"accordion\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     81\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_accordion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mget_tabs\u001b[1;34m(items)\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0mtitles\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m         \u001b[0mchildren\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m         \u001b[0mtitles\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mget_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mrender\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     75\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     76\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"named_list\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 77\u001b[1;33m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_named_list\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     78\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msequence_type\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"tabs\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"sections\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     79\u001b[0m             \u001b[0mwidget\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_tabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"items\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36mget_named_list\u001b[1;34m(items)\u001b[0m\n\u001b[0;32m     36\u001b[0m                 \u001b[1;33m[\u001b[0m\u001b[0mwidgets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mHTML\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"<strong>{get_name(item)}</strong>\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     37\u001b[0m             )\n\u001b[1;32m---> 38\u001b[1;33m             \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     39\u001b[0m         ]\n\u001b[0;32m     40\u001b[0m     )\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas_profiling\\report\\presentation\\flavours\\widget\\container.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m     36\u001b[0m                 \u001b[1;33m[\u001b[0m\u001b[0mwidgets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mHTML\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"<strong>{get_name(item)}</strong>\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     37\u001b[0m             )\n\u001b[1;32m---> 38\u001b[1;33m             \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitems\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     39\u001b[0m         ]\n\u001b[0;32m     40\u001b[0m     )\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\ipywidgets\\widgets\\widget_string.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, value, **kwargs)\u001b[0m\n\u001b[0;32m     30\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mvalue\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     31\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'value'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 32\u001b[1;33m         \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_String\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     33\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     34\u001b[0m     \u001b[0m_model_name\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mUnicode\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'StringModel'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtag\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msync\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\ipywidgets\\widgets\\widget.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, **kwargs)\u001b[0m\n\u001b[0;32m    413\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    414\u001b[0m         \u001b[0mWidget\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_call_widget_constructed\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 415\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    416\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    417\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__del__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\ipywidgets\\widgets\\widget.py\u001b[0m in \u001b[0;36mopen\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    426\u001b[0m         \u001b[1;34m\"\"\"Open a comm to the frontend if one isn't already open.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    427\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcomm\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 428\u001b[1;33m             \u001b[0mstate\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbuffer_paths\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbuffers\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_remove_buffers\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_state\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    429\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    430\u001b[0m             args = dict(target_name='jupyter.widget',\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\ipywidgets\\widgets\\widget.py\u001b[0m in \u001b[0;36mget_state\u001b[1;34m(self, key, drop_defaults)\u001b[0m\n\u001b[0;32m    516\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mkeys\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    517\u001b[0m             \u001b[0mto_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrait_metadata\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'to_json'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_to_json\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 518\u001b[1;33m             \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mto_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    519\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mPY3\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtraits\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mBytes\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    520\u001b[0m                 \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmemoryview\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36m__get__\u001b[1;34m(self, obj, cls)\u001b[0m\n\u001b[0;32m    554\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    555\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 556\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    557\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    558\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36mget\u001b[1;34m(self, obj, cls)\u001b[0m\n\u001b[0;32m    533\u001b[0m                 raise TraitError(\"No default value found for %s trait of %r\"\n\u001b[0;32m    534\u001b[0m                                  % (self.name, obj))\n\u001b[1;32m--> 535\u001b[1;33m             \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdynamic_default\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    536\u001b[0m             \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_values\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    537\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\ipywidgets\\widgets\\trait_types.py\u001b[0m in \u001b[0;36mmake_dynamic_default\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    167\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mmake_dynamic_default\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         return self.klass(*(self.default_args or ()),\n\u001b[1;32m--> 169\u001b[1;33m                           **(self.default_kwargs or {}))\n\u001b[0m\u001b[0;32m    170\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36m__new__\u001b[1;34m(cls, *args, **kwargs)\u001b[0m\n\u001b[0;32m    956\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    957\u001b[0m             \u001b[0minst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnew_meth\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 958\u001b[1;33m         \u001b[0minst\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetup_instance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    959\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0minst\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    960\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36msetup_instance\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    984\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_notifiers\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    985\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_validators\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 986\u001b[1;33m         \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mHasTraits\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetup_instance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    987\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    988\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36msetup_instance\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    975\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    976\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mBaseDescriptor\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 977\u001b[1;33m                     \u001b[0mvalue\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minstance_init\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    978\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    979\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\traitlets\\traitlets.py\u001b[0m in \u001b[0;36minstance_init\u001b[1;34m(self, obj)\u001b[0m\n\u001b[0;32m    522\u001b[0m                 \u001b[0mv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdefault_value\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    523\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 524\u001b[1;33m                     \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trait_values\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mv\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    525\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    526\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[1;34m(self, type, value, traceback)\u001b[0m\n\u001b[0;32m    118\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    119\u001b[0m                 \u001b[0mnext\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 120\u001b[1;33m             \u001b[1;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    121\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    122\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "profile.to_widgets()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be very interesting to look at the *distribution* of our variables, comparing them to the *output variable*.\n",
    "\n",
    "Here we plot it using the seaborn library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = df.columns\n",
    "\n",
    "def PlotDistributiontest(X_train,Y_train,nb_of_features=20):\n",
    "    plt.figure(figsize=(12,nb_of_features*4))\n",
    "    gs = gridspec.GridSpec(nb_of_features, 2) #Customizing Figure Layouts Using GridSpec \n",
    "    for i in range(nb_of_features):\n",
    "        \n",
    "        ax = plt.subplot(gs[i,0])\n",
    "        try :\n",
    "            sns.distplot(X_train[Y_train == 0][X_train.columns[i]], bins=50,color='red') \n",
    "            ax.set_xlabel('')\n",
    "            ax.set_title('histogram of feature of risk 0: ' + str(X_train.columns[i]))\n",
    "        except :\n",
    "            print ('erreur')\n",
    "\n",
    "        try :\n",
    "            ax = plt.subplot(gs[i,1])\n",
    "            sns.distplot(X_train[Y_train == 1][X_train.columns[i]], bins=50,color='green')\n",
    "            ax.set_xlabel('')\n",
    "            ax.set_title('histogram of feature of risk 1: ' + str(X_train.columns[i]))\n",
    "        except: \n",
    "            print('erreur')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x1440 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotDistributiontest(df.drop('Product_Info_2', axis=1),df['Response'],nb_of_features=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PlotDistribution(X_train,Y_train,nb_of_features=20):\n",
    "    plt.figure(figsize=(12,nb_of_features*4))\n",
    "    gs = gridspec.GridSpec(nb_of_features, 1) #Customizing Figure Layouts Using GridSpec \n",
    "    for i in range(nb_of_features):\n",
    "        \n",
    "        try :\n",
    "            ax = plt.subplot(gs[i])\n",
    "            sns.distplot(X_train[Y_train == 0][X_train.columns[i]], bins=50,color='red') \n",
    "            sns.distplot(X_train[Y_train == 1][X_train.columns[i]], bins=50,color='green')\n",
    "            ax.set_xlabel('')\n",
    "            ax.set_title('histogram of feature of risk: ' + str(X_train.columns[i]))\n",
    "        except :\n",
    "            print ('erreur')\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "erreur\n",
      "erreur\n",
      "erreur\n",
      "erreur\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x1440 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotDistribution(df.drop('Product_Info_2', axis=1),df['Response'],nb_of_features=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 Preparing the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 Splitting the Dataset into Training set and Test Set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Splitting the dataset between X and y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df[\"Response\"]\n",
    "X = df.drop([\"Response\"],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Split the data between train 80%  and test 20% in stratified manner (X_train, X_test, y_train, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2  Sampling and co-variance shift"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have now a training set of instances, and a test set and we have Labels and the name of the **Y** variable let's taka a closer look. \n",
    "\n",
    "**Q:** Look at the class imbalance difference between the test and train set ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.748842\n",
       "0    0.251158\n",
       "Name: Response, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()/X_train.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.743266\n",
       "0    0.256734\n",
       "Name: Response, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.value_counts()/X_test.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Check that there isn't a co-variance shift between the train and the test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e1b88fb248>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(X_train['Product_Info_4'],bins=50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e1b88d3208>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(X_test['Product_Info_4'],bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4750, 115), (1188, 115))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 1 :  remove nan column\n",
    "\n",
    "train_sample = X_train.copy().dropna(axis=1) # seulement les features sans nan\n",
    "train_sample['Target'] = 1\n",
    "test_sample = X_test.copy().dropna(axis=1)\n",
    "test_sample['Target'] = 0\n",
    "\n",
    "cov_shift = pd.concat([train_sample,test_sample], axis=0,ignore_index=True)\n",
    "y_shift = cov_shift['Target']\n",
    "cov_shift = cov_shift.drop('Target',axis=1)\n",
    "cov_shift = cov_shift.drop('Product_Info_2',axis=1) # categorical\n",
    "\n",
    "\n",
    "\n",
    "train_sample.shape,test_sample.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-15-96e8029ce74e>, line 20)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-15-96e8029ce74e>\"\u001b[1;36m, line \u001b[1;32m20\u001b[0m\n\u001b[1;33m    probs = clf.predict_proba(X_test_s[[feature]])[:, 1]o\u001b[0m\n\u001b[1;37m                                                        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Step 2 : Run a model to check if we can make a difference between the train and test\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "features = cov_shift.columns\n",
    "\n",
    "clf =  RandomForestClassifier(n_estimators=150, max_depth=2)\n",
    "\n",
    "predictions = np.zeros(y_shift.shape)\n",
    "\n",
    "for feature in features : \n",
    "    cv = StratifiedKFold(n_splits=20,shuffle=True)\n",
    "\n",
    "    for fold, (train_idx, test_idx) in enumerate(cv.split(cov_shift,y_shift)):\n",
    "        X_train_s, X_test_s = cov_shift.loc[train_idx], cov_shift.loc[test_idx]\n",
    "        y_train_s, y_test_s = y_shift[train_idx], y_shift[test_idx]\n",
    "\n",
    "        clf.fit(X_train_s[[feature]], y_train_s)\n",
    "        probs = clf.predict_proba(X_test_s[[feature]])[:, 1]\n",
    "        predictions[test_idx] = probs\n",
    "    \n",
    "    print ('Feature {}: ROC-AUC {}'.format(feature, roc_auc_score(y_shift, predictions)))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Data encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have seen one hot encoding (or creation of dummy variables) let 's use a sickit learn package to do the trick. Remember our categorical variable Product_Info_2:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Print the different modality of this variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['D1', 'D3', 'A1', 'D4', 'A8', 'A3', 'A6', 'D2', 'E1', 'B2', 'A2',\n",
       "       'A7', 'C2', 'A5', 'A4', 'C1', 'C3', 'C4', 'B1'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['Product_Info_2'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now create 19 dummy variables oner per modality of the Product_Info_2 variable and populate those with 0 and 1 accoridng to the instances. There are several way for doing this.  \n",
    "\n",
    "* we can use OneHotEncoder or MultiLabelBinarizer or LabelBinarizer or get_dummies\n",
    "* https://chrisalbon.com/machine_learning/preprocessing_structured_data/one-hot_encode_features_with_multiple_labels/\n",
    "* https://stackoverflow.com/questions/50473381/scikit-learns-labelbinarizer-vs-onehotencoder\n",
    "\n",
    "**Q:** Use any method for encoding the labels of Product_Info_2 feature: . Place those variables in a separate dataframe X_train_dum, and X_test_dum. Also print the head the obtained result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18\n",
       "0  0  0  0  0  0  0  0  0  0  0   0   0   0   0   1   0   0   0   0\n",
       "1  0  0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   1   0   0\n",
       "2  1  0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0\n",
       "3  0  0  0  0  0  0  0  0  0  0   0   0   0   0   1   0   0   0   0\n",
       "4  0  0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   1   0   0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelBinarizer\n",
    "\n",
    "encoder = LabelBinarizer()\n",
    "encoder.fit(X_train['Product_Info_2'])\n",
    "X_train_dum = encoder.transform(X_train['Product_Info_2'])\n",
    "X_test_dum = encoder.transform(X_test['Product_Info_2'])\n",
    "\n",
    "X_train_dum = pd.DataFrame(data=X_train_dum)\n",
    "X_test_dum = pd.DataFrame(data=X_test_dum)\n",
    "\n",
    "\n",
    "X_train_dum.head()\n",
    "\n",
    "# encoder.classes_\n",
    "#TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have 19 columns labeled 0 through 18 which we are going to quickly rename using a for loop function. \n",
    "\n",
    "**Q:** Use a list to rename the columns of X_train_dum, and X_test_dum as 'Product_Info_2_' + 'modality'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_2_A1</th>\n",
       "      <th>Product_Info_2_A2</th>\n",
       "      <th>Product_Info_2_A3</th>\n",
       "      <th>Product_Info_2_A4</th>\n",
       "      <th>Product_Info_2_A5</th>\n",
       "      <th>Product_Info_2_A6</th>\n",
       "      <th>Product_Info_2_A7</th>\n",
       "      <th>Product_Info_2_A8</th>\n",
       "      <th>Product_Info_2_B1</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5452</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2567</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5525</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_2_A1  Product_Info_2_A2  Product_Info_2_A3  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  0                  0   \n",
       "2567                  1                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_A4  Product_Info_2_A5  Product_Info_2_A6  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_A7  Product_Info_2_A8  Product_Info_2_B1  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "5452                  0                  0                  1   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  1   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  1                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  1                  0   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "5452                  0  \n",
       "5255                  0  \n",
       "2567                  0  \n",
       "5525                  0  \n",
       "558                   0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_dum.columns = ['Product_Info_2_'+mode for mode in encoder.classes_]\n",
    "X_test_dum.columns = ['Product_Info_2_'+mode for mode in encoder.classes_]\n",
    "X_train_dum.index = X_train.index\n",
    "X_test_dum.index = X_test.index\n",
    "\n",
    "X_train_dum.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Add the X_train_dum, and X_test_dum to the orginal data and remove the categorical variable using pandas join function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5452</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.582090</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.366109</td>\n",
       "      <td>0.495002</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.626866</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.389121</td>\n",
       "      <td>0.510214</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2567</th>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.134328</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.351464</td>\n",
       "      <td>0.455603</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5525</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.597015</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.267782</td>\n",
       "      <td>0.486962</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.522388</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.257322</td>\n",
       "      <td>0.429143</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "5452               1              26        0.384615               2   \n",
       "5255               1              26        0.230769               2   \n",
       "2567               2              26        0.230769               2   \n",
       "5525               1              10        0.230769               2   \n",
       "558                1              26        0.076923               2   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt       BMI  \\\n",
       "5452               3               1  0.582090  0.800000  0.366109  0.495002   \n",
       "5255               3               1  0.626866  0.818182  0.389121  0.510214   \n",
       "2567               3               1  0.134328  0.818182  0.351464  0.455603   \n",
       "5525               3               1  0.597015  0.654545  0.267782  0.486962   \n",
       "558                3               1  0.522388  0.690909  0.257322  0.429143   \n",
       "\n",
       "      ...  Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "5452  ...                  0                  0                  0   \n",
       "5255  ...                  0                  0                  0   \n",
       "2567  ...                  0                  0                  0   \n",
       "5525  ...                  0                  0                  0   \n",
       "558   ...                  0                  0                  0   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "5452                  0                  0                  1   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  1   \n",
       "558                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "5452                  0                  0                  0   \n",
       "5255                  0                  1                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  0   \n",
       "558                   0                  1                  0   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "5452                  0  \n",
       "5255                  0  \n",
       "2567                  0  \n",
       "5525                  0  \n",
       "558                   0  \n",
       "\n",
       "[5 rows x 144 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = X_train.join(X_train_dum)\n",
    "X_train = X_train.drop('Product_Info_2',axis=1)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = X_test.join(X_test_dum)\n",
    "X_test = X_test.drop('Product_Info_2',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.104478</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.236402</td>\n",
       "      <td>0.329316</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5615</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.626866</td>\n",
       "      <td>0.763636</td>\n",
       "      <td>0.389121</td>\n",
       "      <td>0.569906</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0.164103</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.641791</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.192469</td>\n",
       "      <td>0.345400</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5591</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.552239</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.320084</td>\n",
       "      <td>0.426414</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4650</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.253731</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.476987</td>\n",
       "      <td>0.637640</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "2928               1              26        0.025641               2   \n",
       "5615               1              26        0.230769               2   \n",
       "367                1              10        0.164103               2   \n",
       "5591               1              26        1.000000               2   \n",
       "4650               1              26        0.384615               2   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt       BMI  \\\n",
       "2928               3               1  0.104478  0.763636  0.236402  0.329316   \n",
       "5615               3               1  0.626866  0.763636  0.389121  0.569906   \n",
       "367                1               1  0.641791  0.654545  0.192469  0.345400   \n",
       "5591               3               1  0.552239  0.800000  0.320084  0.426414   \n",
       "4650               3               1  0.253731  0.818182  0.476987  0.637640   \n",
       "\n",
       "      ...  Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "2928  ...                  0                  0                  0   \n",
       "5615  ...                  0                  0                  0   \n",
       "367   ...                  0                  0                  0   \n",
       "5591  ...                  0                  0                  0   \n",
       "4650  ...                  0                  0                  0   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "2928                  0                  0                  0   \n",
       "5615                  0                  0                  1   \n",
       "367                   0                  0                  0   \n",
       "5591                  0                  0                  0   \n",
       "4650                  0                  0                  0   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "2928                  0                  0                  0   \n",
       "5615                  0                  0                  0   \n",
       "367                   0                  0                  0   \n",
       "5591                  1                  0                  0   \n",
       "4650                  1                  0                  0   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "2928                  0  \n",
       "5615                  0  \n",
       "367                   0  \n",
       "5591                  0  \n",
       "4650                  0  \n",
       "\n",
       "[5 rows x 144 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4750, 144), (1188, 144))"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape ,X_test.shape "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.4 Data imputaion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fast and classic Imputation transformer for completing missing values.\n",
    "* https://scikit-learn.org/stable/modules/impute.html\n",
    "\n",
    "**Q:** use impute to fill missing values (before check of missing values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Employment_Info_4       544\n",
       "Employment_Info_6       853\n",
       "Insurance_History_5    2071\n",
       "Family_Hist_2          2318\n",
       "Family_Hist_3          2737\n",
       "Family_Hist_5          3376\n",
       "Medical_History_1       708\n",
       "Medical_History_10     4701\n",
       "Medical_History_15     3532\n",
       "Medical_History_24     4438\n",
       "Medical_History_32     4649\n",
       "dtype: int64"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Check if there are any missing values\n",
    "X_train.isnull().sum()[X_train.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Employment_Info_4       137\n",
       "Employment_Info_6       204\n",
       "Insurance_History_5     519\n",
       "Family_Hist_2           578\n",
       "Family_Hist_3           699\n",
       "Family_Hist_4           363\n",
       "Family_Hist_5           861\n",
       "Medical_History_1       175\n",
       "Medical_History_10     1178\n",
       "Medical_History_15      890\n",
       "Medical_History_24     1113\n",
       "Medical_History_32     1156\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.isnull().sum()[X_test.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Way 1 : Impute your values using pandas (fillna)\n",
    "Xtrainfill=X_train.fillna(-999)\n",
    "Xtrainfill\n",
    "Xtrainfill.isnull().sum()[Xtrainfill.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Way 2 : Impute using SimplteImputer\n",
    "from sklearn.impute import SimpleImputer\n",
    "# imp = SimpleImputer(missing_values=-1, strategy='mean')\n",
    "\n",
    "features_train = [\"Employment_Info_4\" ,\"Employment_Info_6\",\"Insurance_History_5\" ,\n",
    "                    \"Family_Hist_2\",\"Family_Hist_3\",\"Family_Hist_4\",\"Family_Hist_5\",\n",
    "                    \"Medical_History_1\",\"Medical_History_10\",\"Medical_History_15\"  ,\n",
    "                    \"Medical_History_24\",\"Medical_History_32\"]\n",
    "\n",
    "imr = SimpleImputer(missing_values=np.nan, strategy='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "for feature in features_train:\n",
    "    imr = imr.fit(X_train[[feature]])\n",
    "    featur_filled= imr.transform(X_train[[feature]])\n",
    "    X_train[feature]=featur_filled\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.isnull().sum()[X_train.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "for feature in features_train:\n",
    "    imr = imr.fit(X_test[[feature]])\n",
    "    featur_filled= imr.transform(X_test[[feature]])\n",
    "    X_test[feature]=featur_filled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.isnull().sum()[X_test.isnull().sum() >0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.5 Scaling the data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q:** Normalizing by the range of the data Min: MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# X = (X - min(X)) / (max(X) - min(X))    range between 0 and 1\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "\n",
    "scl = MinMaxScaler()\n",
    "X_train_minmax =scl.fit_transform(X_train) \n",
    "X_test_minmax = scl.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.120690</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.141176</td>\n",
       "      <td>0.149199</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.724138</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.312941</td>\n",
       "      <td>0.454401</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.164103</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.741379</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.091765</td>\n",
       "      <td>0.169603</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.637931</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.272373</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.293103</td>\n",
       "      <td>0.708333</td>\n",
       "      <td>0.411765</td>\n",
       "      <td>0.540325</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1183</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.655172</td>\n",
       "      <td>0.708333</td>\n",
       "      <td>0.282353</td>\n",
       "      <td>0.328645</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1184</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.431034</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.517647</td>\n",
       "      <td>0.895587</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1185</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.827586</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.082353</td>\n",
       "      <td>0.111512</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1186</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.396552</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.294118</td>\n",
       "      <td>0.420954</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1187</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.879310</td>\n",
       "      <td>0.291667</td>\n",
       "      <td>0.164706</td>\n",
       "      <td>0.350163</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1188 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "0                0.0        0.666667        0.025641             0.0   \n",
       "1                0.0        0.666667        0.230769             0.0   \n",
       "2                0.0        0.181818        0.164103             0.0   \n",
       "3                0.0        0.666667        1.000000             0.0   \n",
       "4                0.0        0.666667        0.384615             0.0   \n",
       "...              ...             ...             ...             ...   \n",
       "1183             0.0        0.666667        0.128205             0.0   \n",
       "1184             0.0        0.666667        0.076923             0.0   \n",
       "1185             0.0        0.666667        0.076923             0.0   \n",
       "1186             0.0        0.666667        0.384615             0.0   \n",
       "1187             0.0        0.666667        0.000000             0.0   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt       BMI  \\\n",
       "0                1.0             0.0  0.120690  0.583333  0.141176  0.149199   \n",
       "1                1.0             0.0  0.724138  0.583333  0.312941  0.454401   \n",
       "2                0.0             0.0  0.741379  0.333333  0.091765  0.169603   \n",
       "3                1.0             0.0  0.637931  0.666667  0.235294  0.272373   \n",
       "4                1.0             0.0  0.293103  0.708333  0.411765  0.540325   \n",
       "...              ...             ...       ...       ...       ...       ...   \n",
       "1183             1.0             0.0  0.655172  0.708333  0.282353  0.328645   \n",
       "1184             1.0             0.0  0.431034  0.500000  0.517647  0.895587   \n",
       "1185             0.0             0.0  0.827586  0.416667  0.082353  0.111512   \n",
       "1186             0.0             0.0  0.396552  0.583333  0.294118  0.420954   \n",
       "1187             1.0             0.0  0.879310  0.291667  0.164706  0.350163   \n",
       "\n",
       "      ...  Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "0     ...                0.0                0.0                0.0   \n",
       "1     ...                0.0                0.0                0.0   \n",
       "2     ...                0.0                0.0                0.0   \n",
       "3     ...                0.0                0.0                0.0   \n",
       "4     ...                0.0                0.0                0.0   \n",
       "...   ...                ...                ...                ...   \n",
       "1183  ...                0.0                0.0                0.0   \n",
       "1184  ...                0.0                0.0                0.0   \n",
       "1185  ...                0.0                0.0                0.0   \n",
       "1186  ...                0.0                0.0                0.0   \n",
       "1187  ...                0.0                0.0                0.0   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "0                   0.0                0.0                0.0   \n",
       "1                   0.0                0.0                1.0   \n",
       "2                   0.0                0.0                0.0   \n",
       "3                   0.0                0.0                0.0   \n",
       "4                   0.0                0.0                0.0   \n",
       "...                 ...                ...                ...   \n",
       "1183                0.0                0.0                0.0   \n",
       "1184                0.0                0.0                1.0   \n",
       "1185                0.0                0.0                0.0   \n",
       "1186                0.0                0.0                0.0   \n",
       "1187                0.0                0.0                0.0   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "0                   0.0                0.0                0.0   \n",
       "1                   0.0                0.0                0.0   \n",
       "2                   0.0                0.0                0.0   \n",
       "3                   1.0                0.0                0.0   \n",
       "4                   1.0                0.0                0.0   \n",
       "...                 ...                ...                ...   \n",
       "1183                0.0                0.0                0.0   \n",
       "1184                0.0                0.0                0.0   \n",
       "1185                0.0                0.0                0.0   \n",
       "1186                0.0                0.0                1.0   \n",
       "1187                0.0                0.0                0.0   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "0                   0.0  \n",
       "1                   0.0  \n",
       "2                   0.0  \n",
       "3                   0.0  \n",
       "4                   0.0  \n",
       "...                 ...  \n",
       "1183                0.0  \n",
       "1184                0.0  \n",
       "1185                0.0  \n",
       "1186                0.0  \n",
       "1187                0.0  \n",
       "\n",
       "[1188 rows x 144 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_minmax_df=pd.DataFrame(X_train_minmax)\n",
    "X_train_minmax_df.columns=X_train.columns\n",
    "X_train_minmax_df\n",
    "\n",
    "X_test_minmax_df=pd.DataFrame(X_test_minmax)\n",
    "X_test_minmax_df.columns=X_train.columns\n",
    "X_test_minmax_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b) StandardScaler : Standardize features by removing the mean and scaling to unit variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# X = (X - mean(X)) / std(X)   range between 0 and 1\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train )\n",
    "X_train_std = scaler.transform(X_train)\n",
    "X_test_std = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>0.167964</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.899729</td>\n",
       "      <td>1.238391</td>\n",
       "      <td>0.788541</td>\n",
       "      <td>0.177316</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.369997</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.126997</td>\n",
       "      <td>1.485103</td>\n",
       "      <td>1.046127</td>\n",
       "      <td>0.301415</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>1.746266</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.961414</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.369997</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-1.372958</td>\n",
       "      <td>1.485103</td>\n",
       "      <td>0.624622</td>\n",
       "      <td>-0.144087</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>-3.002229</td>\n",
       "      <td>-0.369997</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.975485</td>\n",
       "      <td>-0.735306</td>\n",
       "      <td>-0.312057</td>\n",
       "      <td>0.111733</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.596704</td>\n",
       "      <td>-0.241882</td>\n",
       "      <td>-0.429142</td>\n",
       "      <td>-0.359940</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>1.746266</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4745</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.748216</td>\n",
       "      <td>-2.215579</td>\n",
       "      <td>-1.482906</td>\n",
       "      <td>-0.669449</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4746</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.748216</td>\n",
       "      <td>-1.722154</td>\n",
       "      <td>-0.452559</td>\n",
       "      <td>0.631834</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4747</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>2.319808</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-0.236615</td>\n",
       "      <td>-0.241882</td>\n",
       "      <td>2.263810</td>\n",
       "      <td>3.112132</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>1.746266</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4748</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.369997</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.975485</td>\n",
       "      <td>0.991679</td>\n",
       "      <td>0.249950</td>\n",
       "      <td>-0.269632</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4749</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>-3.002229</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.202754</td>\n",
       "      <td>-1.228730</td>\n",
       "      <td>-0.897481</td>\n",
       "      <td>-0.390216</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.35889</td>\n",
       "      <td>-0.572650</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4750 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "0          -0.167745        0.295207        0.167964       -0.083642   \n",
       "1          -0.167745        0.295207       -0.369997       -0.083642   \n",
       "2           5.961414        0.295207       -0.369997       -0.083642   \n",
       "3          -0.167745       -3.002229       -0.369997       -0.083642   \n",
       "4          -0.167745        0.295207       -0.907958       -0.083642   \n",
       "...              ...             ...             ...             ...   \n",
       "4745       -0.167745        0.295207       -0.907958       -0.083642   \n",
       "4746       -0.167745        0.295207       -0.907958       -0.083642   \n",
       "4747       -0.167745        0.295207        2.319808       -0.083642   \n",
       "4748       -0.167745        0.295207       -0.369997       -0.083642   \n",
       "4749       -0.167745       -3.002229       -0.907958       -0.083642   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt       BMI  \\\n",
       "0           0.435752       -0.158216  0.899729  1.238391  0.788541  0.177316   \n",
       "1           0.435752       -0.158216  1.126997  1.485103  1.046127  0.301415   \n",
       "2           0.435752       -0.158216 -1.372958  1.485103  0.624622 -0.144087   \n",
       "3           0.435752       -0.158216  0.975485 -0.735306 -0.312057  0.111733   \n",
       "4           0.435752       -0.158216  0.596704 -0.241882 -0.429142 -0.359940   \n",
       "...              ...             ...       ...       ...       ...       ...   \n",
       "4745        0.435752       -0.158216  0.748216 -2.215579 -1.482906 -0.669449   \n",
       "4746        0.435752       -0.158216  0.748216 -1.722154 -0.452559  0.631834   \n",
       "4747        0.435752       -0.158216 -0.236615 -0.241882  2.263810  3.112132   \n",
       "4748        0.435752       -0.158216  0.975485  0.991679  0.249950 -0.269632   \n",
       "4749        0.435752       -0.158216  1.202754 -1.228730 -0.897481 -0.390216   \n",
       "\n",
       "      ...  Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "0     ...          -0.150349          -0.074188          -0.059932   \n",
       "1     ...          -0.150349          -0.074188          -0.059932   \n",
       "2     ...          -0.150349          -0.074188          -0.059932   \n",
       "3     ...          -0.150349          -0.074188          -0.059932   \n",
       "4     ...          -0.150349          -0.074188          -0.059932   \n",
       "...   ...                ...                ...                ...   \n",
       "4745  ...          -0.150349          -0.074188          -0.059932   \n",
       "4746  ...          -0.150349          -0.074188          -0.059932   \n",
       "4747  ...          -0.150349          -0.074188          -0.059932   \n",
       "4748  ...          -0.150349          -0.074188          -0.059932   \n",
       "4749  ...          -0.150349          -0.074188          -0.059932   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "0             -0.072739          -0.056284           2.931887   \n",
       "1             -0.072739          -0.056284          -0.341077   \n",
       "2             -0.072739          -0.056284          -0.341077   \n",
       "3             -0.072739          -0.056284           2.931887   \n",
       "4             -0.072739          -0.056284          -0.341077   \n",
       "...                 ...                ...                ...   \n",
       "4745          -0.072739          -0.056284           2.931887   \n",
       "4746          -0.072739          -0.056284          -0.341077   \n",
       "4747          -0.072739          -0.056284          -0.341077   \n",
       "4748          -0.072739          -0.056284           2.931887   \n",
       "4749          -0.072739          -0.056284           2.931887   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "0              -0.35889          -0.572650          -0.479181   \n",
       "1              -0.35889           1.746266          -0.479181   \n",
       "2              -0.35889          -0.572650          -0.479181   \n",
       "3              -0.35889          -0.572650          -0.479181   \n",
       "4              -0.35889           1.746266          -0.479181   \n",
       "...                 ...                ...                ...   \n",
       "4745           -0.35889          -0.572650          -0.479181   \n",
       "4746           -0.35889          -0.572650          -0.479181   \n",
       "4747           -0.35889           1.746266          -0.479181   \n",
       "4748           -0.35889          -0.572650          -0.479181   \n",
       "4749           -0.35889          -0.572650          -0.479181   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "0             -0.210749  \n",
       "1             -0.210749  \n",
       "2             -0.210749  \n",
       "3             -0.210749  \n",
       "4             -0.210749  \n",
       "...                 ...  \n",
       "4745          -0.210749  \n",
       "4746          -0.210749  \n",
       "4747          -0.210749  \n",
       "4748          -0.210749  \n",
       "4749          -0.210749  \n",
       "\n",
       "[4750 rows x 144 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_std_df=pd.DataFrame(X_train_std)\n",
    "X_train_std_df.columns=X_train.columns\n",
    "X_train_std_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-1.087279</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-1.524470</td>\n",
       "      <td>0.744967</td>\n",
       "      <td>-0.663312</td>\n",
       "      <td>-1.174302</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.369997</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.126997</td>\n",
       "      <td>0.744967</td>\n",
       "      <td>1.046127</td>\n",
       "      <td>0.788365</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>-3.002229</td>\n",
       "      <td>-0.603114</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>-2.294884</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.202754</td>\n",
       "      <td>-0.735306</td>\n",
       "      <td>-1.155068</td>\n",
       "      <td>-1.043092</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>2.319808</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.748216</td>\n",
       "      <td>1.238391</td>\n",
       "      <td>0.273367</td>\n",
       "      <td>-0.382206</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>2.786366</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>0.167964</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-0.766908</td>\n",
       "      <td>1.485103</td>\n",
       "      <td>2.029640</td>\n",
       "      <td>1.340920</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>2.786366</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1183</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.728638</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>0.823972</td>\n",
       "      <td>1.485103</td>\n",
       "      <td>0.741707</td>\n",
       "      <td>-0.020336</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1184</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-0.160858</td>\n",
       "      <td>0.251542</td>\n",
       "      <td>3.083404</td>\n",
       "      <td>3.625509</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>2.931887</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1185</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-0.907958</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>-2.294884</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.581535</td>\n",
       "      <td>-0.241882</td>\n",
       "      <td>-1.248736</td>\n",
       "      <td>-1.416658</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1186</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>0.167964</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>-2.294884</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>-0.312371</td>\n",
       "      <td>0.744967</td>\n",
       "      <td>0.858792</td>\n",
       "      <td>0.573279</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>2.086895</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1187</th>\n",
       "      <td>-0.167745</td>\n",
       "      <td>0.295207</td>\n",
       "      <td>-1.176939</td>\n",
       "      <td>-0.083642</td>\n",
       "      <td>0.435752</td>\n",
       "      <td>-0.158216</td>\n",
       "      <td>1.808803</td>\n",
       "      <td>-0.982018</td>\n",
       "      <td>-0.429142</td>\n",
       "      <td>0.118037</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.150349</td>\n",
       "      <td>-0.074188</td>\n",
       "      <td>-0.059932</td>\n",
       "      <td>-0.072739</td>\n",
       "      <td>-0.056284</td>\n",
       "      <td>-0.341077</td>\n",
       "      <td>-0.358890</td>\n",
       "      <td>-0.57265</td>\n",
       "      <td>-0.479181</td>\n",
       "      <td>-0.210749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1188 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_1  Product_Info_3  Product_Info_4  Product_Info_5  \\\n",
       "0          -0.167745        0.295207       -1.087279       -0.083642   \n",
       "1          -0.167745        0.295207       -0.369997       -0.083642   \n",
       "2          -0.167745       -3.002229       -0.603114       -0.083642   \n",
       "3          -0.167745        0.295207        2.319808       -0.083642   \n",
       "4          -0.167745        0.295207        0.167964       -0.083642   \n",
       "...              ...             ...             ...             ...   \n",
       "1183       -0.167745        0.295207       -0.728638       -0.083642   \n",
       "1184       -0.167745        0.295207       -0.907958       -0.083642   \n",
       "1185       -0.167745        0.295207       -0.907958       -0.083642   \n",
       "1186       -0.167745        0.295207        0.167964       -0.083642   \n",
       "1187       -0.167745        0.295207       -1.176939       -0.083642   \n",
       "\n",
       "      Product_Info_6  Product_Info_7   Ins_Age        Ht        Wt       BMI  \\\n",
       "0           0.435752       -0.158216 -1.524470  0.744967 -0.663312 -1.174302   \n",
       "1           0.435752       -0.158216  1.126997  0.744967  1.046127  0.788365   \n",
       "2          -2.294884       -0.158216  1.202754 -0.735306 -1.155068 -1.043092   \n",
       "3           0.435752       -0.158216  0.748216  1.238391  0.273367 -0.382206   \n",
       "4           0.435752       -0.158216 -0.766908  1.485103  2.029640  1.340920   \n",
       "...              ...             ...       ...       ...       ...       ...   \n",
       "1183        0.435752       -0.158216  0.823972  1.485103  0.741707 -0.020336   \n",
       "1184        0.435752       -0.158216 -0.160858  0.251542  3.083404  3.625509   \n",
       "1185       -2.294884       -0.158216  1.581535 -0.241882 -1.248736 -1.416658   \n",
       "1186       -2.294884       -0.158216 -0.312371  0.744967  0.858792  0.573279   \n",
       "1187        0.435752       -0.158216  1.808803 -0.982018 -0.429142  0.118037   \n",
       "\n",
       "      ...  Product_Info_2_B2  Product_Info_2_C1  Product_Info_2_C2  \\\n",
       "0     ...          -0.150349          -0.074188          -0.059932   \n",
       "1     ...          -0.150349          -0.074188          -0.059932   \n",
       "2     ...          -0.150349          -0.074188          -0.059932   \n",
       "3     ...          -0.150349          -0.074188          -0.059932   \n",
       "4     ...          -0.150349          -0.074188          -0.059932   \n",
       "...   ...                ...                ...                ...   \n",
       "1183  ...          -0.150349          -0.074188          -0.059932   \n",
       "1184  ...          -0.150349          -0.074188          -0.059932   \n",
       "1185  ...          -0.150349          -0.074188          -0.059932   \n",
       "1186  ...          -0.150349          -0.074188          -0.059932   \n",
       "1187  ...          -0.150349          -0.074188          -0.059932   \n",
       "\n",
       "      Product_Info_2_C3  Product_Info_2_C4  Product_Info_2_D1  \\\n",
       "0             -0.072739          -0.056284          -0.341077   \n",
       "1             -0.072739          -0.056284           2.931887   \n",
       "2             -0.072739          -0.056284          -0.341077   \n",
       "3             -0.072739          -0.056284          -0.341077   \n",
       "4             -0.072739          -0.056284          -0.341077   \n",
       "...                 ...                ...                ...   \n",
       "1183          -0.072739          -0.056284          -0.341077   \n",
       "1184          -0.072739          -0.056284           2.931887   \n",
       "1185          -0.072739          -0.056284          -0.341077   \n",
       "1186          -0.072739          -0.056284          -0.341077   \n",
       "1187          -0.072739          -0.056284          -0.341077   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D3  Product_Info_2_D4  \\\n",
       "0             -0.358890           -0.57265          -0.479181   \n",
       "1             -0.358890           -0.57265          -0.479181   \n",
       "2             -0.358890           -0.57265          -0.479181   \n",
       "3              2.786366           -0.57265          -0.479181   \n",
       "4              2.786366           -0.57265          -0.479181   \n",
       "...                 ...                ...                ...   \n",
       "1183          -0.358890           -0.57265          -0.479181   \n",
       "1184          -0.358890           -0.57265          -0.479181   \n",
       "1185          -0.358890           -0.57265          -0.479181   \n",
       "1186          -0.358890           -0.57265           2.086895   \n",
       "1187          -0.358890           -0.57265          -0.479181   \n",
       "\n",
       "      Product_Info_2_E1  \n",
       "0             -0.210749  \n",
       "1             -0.210749  \n",
       "2             -0.210749  \n",
       "3             -0.210749  \n",
       "4             -0.210749  \n",
       "...                 ...  \n",
       "1183          -0.210749  \n",
       "1184          -0.210749  \n",
       "1185          -0.210749  \n",
       "1186          -0.210749  \n",
       "1187          -0.210749  \n",
       "\n",
       "[1188 rows x 144 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_std_df=pd.DataFrame(X_test_std)\n",
    "X_test_std_df.columns=X_test.columns\n",
    "X_test_std_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Model Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4750, 144), (4750,))"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape,y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Evaluate metric(s) by cross-validation and also record fit/score times. Use Decision tree\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "cv_dt = cross_validate(DecisionTreeClassifier(),X_train,y_train,scoring='accuracy',cv=5, n_jobs=-1, return_train_score=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([1.57491755, 1.5459218 , 1.55891943, 1.53891802, 0.8379519 ]),\n",
       " 'score_time': array([0.06098914, 0.07298207, 0.06598759, 0.07498789, 0.01499915]),\n",
       " 'test_score': array([0.77812829, 0.74342797, 0.72631579, 0.74183351, 0.73761855]),\n",
       " 'train_score': array([1., 1., 1., 1., 1.])}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean score:  0.7454648201680468 Mean std:  0.01739244994799133\n"
     ]
    }
   ],
   "source": [
    "print(\"Mean score: \", cv_dt['test_score'].mean(), \"Mean std: \", cv_dt['test_score'].std())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5>over fitting</h5>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 4-2 feature correlation <h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# generel view about the corr \n",
    "correlations = X_train.corr()\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10,10))\n",
    "sns.heatmap(correlations, vmax=1.0, center=0, fmt='.2f',square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\": .70})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_1</th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Product_Info_5</th>\n",
       "      <th>Product_Info_6</th>\n",
       "      <th>Product_Info_7</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>...</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Product_Info_1</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.023459</td>\n",
       "      <td>0.084898</td>\n",
       "      <td>0.063644</td>\n",
       "      <td>-0.081937</td>\n",
       "      <td>0.006899</td>\n",
       "      <td>-0.064422</td>\n",
       "      <td>0.047289</td>\n",
       "      <td>-0.005693</td>\n",
       "      <td>-0.035777</td>\n",
       "      <td>...</td>\n",
       "      <td>0.027438</td>\n",
       "      <td>-0.012445</td>\n",
       "      <td>-0.010053</td>\n",
       "      <td>0.005632</td>\n",
       "      <td>0.013557</td>\n",
       "      <td>0.018805</td>\n",
       "      <td>-0.007442</td>\n",
       "      <td>0.005676</td>\n",
       "      <td>0.012331</td>\n",
       "      <td>-0.016168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_3</th>\n",
       "      <td>0.023459</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.048627</td>\n",
       "      <td>0.028871</td>\n",
       "      <td>-0.011702</td>\n",
       "      <td>0.011570</td>\n",
       "      <td>0.010191</td>\n",
       "      <td>0.284793</td>\n",
       "      <td>0.198367</td>\n",
       "      <td>0.071166</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.007553</td>\n",
       "      <td>-0.008090</td>\n",
       "      <td>0.017692</td>\n",
       "      <td>0.023272</td>\n",
       "      <td>0.020482</td>\n",
       "      <td>0.038348</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>-0.033179</td>\n",
       "      <td>-0.006395</td>\n",
       "      <td>0.008891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_4</th>\n",
       "      <td>0.084898</td>\n",
       "      <td>0.048627</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044955</td>\n",
       "      <td>-0.058849</td>\n",
       "      <td>0.052339</td>\n",
       "      <td>-0.259114</td>\n",
       "      <td>0.146302</td>\n",
       "      <td>-0.039785</td>\n",
       "      <td>-0.145190</td>\n",
       "      <td>...</td>\n",
       "      <td>0.066127</td>\n",
       "      <td>0.006832</td>\n",
       "      <td>0.013859</td>\n",
       "      <td>0.002826</td>\n",
       "      <td>0.032086</td>\n",
       "      <td>0.005863</td>\n",
       "      <td>-0.018195</td>\n",
       "      <td>0.071369</td>\n",
       "      <td>0.218597</td>\n",
       "      <td>-0.078486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_5</th>\n",
       "      <td>0.063644</td>\n",
       "      <td>0.028871</td>\n",
       "      <td>0.044955</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.046606</td>\n",
       "      <td>0.003187</td>\n",
       "      <td>0.010163</td>\n",
       "      <td>0.077943</td>\n",
       "      <td>0.044113</td>\n",
       "      <td>0.005622</td>\n",
       "      <td>...</td>\n",
       "      <td>0.004664</td>\n",
       "      <td>0.028148</td>\n",
       "      <td>-0.005013</td>\n",
       "      <td>-0.006084</td>\n",
       "      <td>-0.004708</td>\n",
       "      <td>0.046133</td>\n",
       "      <td>0.001870</td>\n",
       "      <td>-0.000877</td>\n",
       "      <td>-0.014064</td>\n",
       "      <td>-0.005067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_6</th>\n",
       "      <td>-0.081937</td>\n",
       "      <td>-0.011702</td>\n",
       "      <td>-0.058849</td>\n",
       "      <td>-0.046606</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.005628</td>\n",
       "      <td>-0.052020</td>\n",
       "      <td>-0.015295</td>\n",
       "      <td>0.021447</td>\n",
       "      <td>0.035009</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010775</td>\n",
       "      <td>-0.014422</td>\n",
       "      <td>0.006862</td>\n",
       "      <td>-0.008029</td>\n",
       "      <td>0.014280</td>\n",
       "      <td>-0.028239</td>\n",
       "      <td>-0.011768</td>\n",
       "      <td>0.017578</td>\n",
       "      <td>0.019983</td>\n",
       "      <td>-0.013575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <td>0.018805</td>\n",
       "      <td>0.038348</td>\n",
       "      <td>0.005863</td>\n",
       "      <td>0.046133</td>\n",
       "      <td>-0.028239</td>\n",
       "      <td>0.017462</td>\n",
       "      <td>0.212709</td>\n",
       "      <td>0.062846</td>\n",
       "      <td>0.082090</td>\n",
       "      <td>0.060664</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.051281</td>\n",
       "      <td>-0.025304</td>\n",
       "      <td>-0.020441</td>\n",
       "      <td>-0.024810</td>\n",
       "      <td>-0.019197</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.122409</td>\n",
       "      <td>-0.195318</td>\n",
       "      <td>-0.163438</td>\n",
       "      <td>-0.071882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <td>-0.007442</td>\n",
       "      <td>0.021203</td>\n",
       "      <td>-0.018195</td>\n",
       "      <td>0.001870</td>\n",
       "      <td>-0.011768</td>\n",
       "      <td>0.007567</td>\n",
       "      <td>0.209737</td>\n",
       "      <td>0.069856</td>\n",
       "      <td>0.093953</td>\n",
       "      <td>0.072928</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.053959</td>\n",
       "      <td>-0.026625</td>\n",
       "      <td>-0.021509</td>\n",
       "      <td>-0.026105</td>\n",
       "      <td>-0.020200</td>\n",
       "      <td>-0.122409</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.205519</td>\n",
       "      <td>-0.171973</td>\n",
       "      <td>-0.075636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D3</th>\n",
       "      <td>0.005676</td>\n",
       "      <td>-0.033179</td>\n",
       "      <td>0.071369</td>\n",
       "      <td>-0.000877</td>\n",
       "      <td>0.017578</td>\n",
       "      <td>0.016934</td>\n",
       "      <td>0.012215</td>\n",
       "      <td>0.066481</td>\n",
       "      <td>0.074039</td>\n",
       "      <td>0.051842</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.086098</td>\n",
       "      <td>-0.042484</td>\n",
       "      <td>-0.034320</td>\n",
       "      <td>-0.041654</td>\n",
       "      <td>-0.032231</td>\n",
       "      <td>-0.195318</td>\n",
       "      <td>-0.205519</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.274403</td>\n",
       "      <td>-0.120685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <td>0.012331</td>\n",
       "      <td>-0.006395</td>\n",
       "      <td>0.218597</td>\n",
       "      <td>-0.014064</td>\n",
       "      <td>0.019983</td>\n",
       "      <td>0.015185</td>\n",
       "      <td>-0.350872</td>\n",
       "      <td>0.010845</td>\n",
       "      <td>-0.062610</td>\n",
       "      <td>-0.086233</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.072045</td>\n",
       "      <td>-0.035549</td>\n",
       "      <td>-0.028718</td>\n",
       "      <td>-0.034855</td>\n",
       "      <td>-0.026970</td>\n",
       "      <td>-0.163438</td>\n",
       "      <td>-0.171973</td>\n",
       "      <td>-0.274403</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.100987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_E1</th>\n",
       "      <td>-0.016168</td>\n",
       "      <td>0.008891</td>\n",
       "      <td>-0.078486</td>\n",
       "      <td>-0.005067</td>\n",
       "      <td>-0.013575</td>\n",
       "      <td>-0.006307</td>\n",
       "      <td>-0.030739</td>\n",
       "      <td>-0.020861</td>\n",
       "      <td>-0.029461</td>\n",
       "      <td>-0.024364</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.031686</td>\n",
       "      <td>-0.015635</td>\n",
       "      <td>-0.012631</td>\n",
       "      <td>-0.015330</td>\n",
       "      <td>-0.011862</td>\n",
       "      <td>-0.071882</td>\n",
       "      <td>-0.075636</td>\n",
       "      <td>-0.120685</td>\n",
       "      <td>-0.100987</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>144 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Product_Info_1  Product_Info_3  Product_Info_4  \\\n",
       "Product_Info_1           1.000000        0.023459        0.084898   \n",
       "Product_Info_3           0.023459        1.000000        0.048627   \n",
       "Product_Info_4           0.084898        0.048627        1.000000   \n",
       "Product_Info_5           0.063644        0.028871        0.044955   \n",
       "Product_Info_6          -0.081937       -0.011702       -0.058849   \n",
       "...                           ...             ...             ...   \n",
       "Product_Info_2_D1        0.018805        0.038348        0.005863   \n",
       "Product_Info_2_D2       -0.007442        0.021203       -0.018195   \n",
       "Product_Info_2_D3        0.005676       -0.033179        0.071369   \n",
       "Product_Info_2_D4        0.012331       -0.006395        0.218597   \n",
       "Product_Info_2_E1       -0.016168        0.008891       -0.078486   \n",
       "\n",
       "                   Product_Info_5  Product_Info_6  Product_Info_7   Ins_Age  \\\n",
       "Product_Info_1           0.063644       -0.081937        0.006899 -0.064422   \n",
       "Product_Info_3           0.028871       -0.011702        0.011570  0.010191   \n",
       "Product_Info_4           0.044955       -0.058849        0.052339 -0.259114   \n",
       "Product_Info_5           1.000000       -0.046606        0.003187  0.010163   \n",
       "Product_Info_6          -0.046606        1.000000        0.005628 -0.052020   \n",
       "...                           ...             ...             ...       ...   \n",
       "Product_Info_2_D1        0.046133       -0.028239        0.017462  0.212709   \n",
       "Product_Info_2_D2        0.001870       -0.011768        0.007567  0.209737   \n",
       "Product_Info_2_D3       -0.000877        0.017578        0.016934  0.012215   \n",
       "Product_Info_2_D4       -0.014064        0.019983        0.015185 -0.350872   \n",
       "Product_Info_2_E1       -0.005067       -0.013575       -0.006307 -0.030739   \n",
       "\n",
       "                         Ht        Wt       BMI  ...  Product_Info_2_B2  \\\n",
       "Product_Info_1     0.047289 -0.005693 -0.035777  ...           0.027438   \n",
       "Product_Info_3     0.284793  0.198367  0.071166  ...          -0.007553   \n",
       "Product_Info_4     0.146302 -0.039785 -0.145190  ...           0.066127   \n",
       "Product_Info_5     0.077943  0.044113  0.005622  ...           0.004664   \n",
       "Product_Info_6    -0.015295  0.021447  0.035009  ...           0.010775   \n",
       "...                     ...       ...       ...  ...                ...   \n",
       "Product_Info_2_D1  0.062846  0.082090  0.060664  ...          -0.051281   \n",
       "Product_Info_2_D2  0.069856  0.093953  0.072928  ...          -0.053959   \n",
       "Product_Info_2_D3  0.066481  0.074039  0.051842  ...          -0.086098   \n",
       "Product_Info_2_D4  0.010845 -0.062610 -0.086233  ...          -0.072045   \n",
       "Product_Info_2_E1 -0.020861 -0.029461 -0.024364  ...          -0.031686   \n",
       "\n",
       "                   Product_Info_2_C1  Product_Info_2_C2  Product_Info_2_C3  \\\n",
       "Product_Info_1             -0.012445          -0.010053           0.005632   \n",
       "Product_Info_3             -0.008090           0.017692           0.023272   \n",
       "Product_Info_4              0.006832           0.013859           0.002826   \n",
       "Product_Info_5              0.028148          -0.005013          -0.006084   \n",
       "Product_Info_6             -0.014422           0.006862          -0.008029   \n",
       "...                              ...                ...                ...   \n",
       "Product_Info_2_D1          -0.025304          -0.020441          -0.024810   \n",
       "Product_Info_2_D2          -0.026625          -0.021509          -0.026105   \n",
       "Product_Info_2_D3          -0.042484          -0.034320          -0.041654   \n",
       "Product_Info_2_D4          -0.035549          -0.028718          -0.034855   \n",
       "Product_Info_2_E1          -0.015635          -0.012631          -0.015330   \n",
       "\n",
       "                   Product_Info_2_C4  Product_Info_2_D1  Product_Info_2_D2  \\\n",
       "Product_Info_1              0.013557           0.018805          -0.007442   \n",
       "Product_Info_3              0.020482           0.038348           0.021203   \n",
       "Product_Info_4              0.032086           0.005863          -0.018195   \n",
       "Product_Info_5             -0.004708           0.046133           0.001870   \n",
       "Product_Info_6              0.014280          -0.028239          -0.011768   \n",
       "...                              ...                ...                ...   \n",
       "Product_Info_2_D1          -0.019197           1.000000          -0.122409   \n",
       "Product_Info_2_D2          -0.020200          -0.122409           1.000000   \n",
       "Product_Info_2_D3          -0.032231          -0.195318          -0.205519   \n",
       "Product_Info_2_D4          -0.026970          -0.163438          -0.171973   \n",
       "Product_Info_2_E1          -0.011862          -0.071882          -0.075636   \n",
       "\n",
       "                   Product_Info_2_D3  Product_Info_2_D4  Product_Info_2_E1  \n",
       "Product_Info_1              0.005676           0.012331          -0.016168  \n",
       "Product_Info_3             -0.033179          -0.006395           0.008891  \n",
       "Product_Info_4              0.071369           0.218597          -0.078486  \n",
       "Product_Info_5             -0.000877          -0.014064          -0.005067  \n",
       "Product_Info_6              0.017578           0.019983          -0.013575  \n",
       "...                              ...                ...                ...  \n",
       "Product_Info_2_D1          -0.195318          -0.163438          -0.071882  \n",
       "Product_Info_2_D2          -0.205519          -0.171973          -0.075636  \n",
       "Product_Info_2_D3           1.000000          -0.274403          -0.120685  \n",
       "Product_Info_2_D4          -0.274403           1.000000          -0.100987  \n",
       "Product_Info_2_E1          -0.120685          -0.100987           1.000000  \n",
       "\n",
       "[144 rows x 144 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5.1 Pearson Correlation\n",
    "\n",
    "Pearson's correlation coefficient is the covariance of the two variables divided by the product of their standard deviations.\n",
    "\n",
    "$$p_{X,Y} = \\frac{cov(X,Y)}{sigma_{X}sigma_{Y}}$$\n",
    "\n",
    "$$ \\text{ where cov is the covariance,   }  sigma_{X} \\text{  is the standard deviation of X and }  sigma_{Y} \\text{  is the standard deviation of Y} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pearson Correlation\n",
    "from scipy.stats import pearsonr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** NB **\n",
    "The function below computes the pearson correlation using pearsonr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def TabPearsonr(X_train,y_train):\n",
    "    \"\"\"\n",
    "    Computes the pearson correlation between each column of X_train and the column Y_train.\n",
    "    \n",
    "    Arguments:\n",
    "    X_train -- learning set\n",
    "    Y_train -- learning output\n",
    "    Labels -- names of the features\n",
    "    \n",
    "    Returns:\n",
    "    TabResultsPearson -- the table of the normalized mutual informations such as\n",
    "    TabResultsPearson[j] = PearsonCorr(X_train[:,i],Y_train)\n",
    "    \"\"\"\n",
    "    ListPearsonCorr = []\n",
    "    for feature in X_train.columns :\n",
    "        ListPearsonCorr.append(pearsonr(X_train[feature],y_train))\n",
    "    \n",
    "    TabResultsPearson = pd.DataFrame(ListPearsonCorr,columns=['Pearson Correlation','P-Value'],index=X_train.columns)\n",
    "    #TabResultsPearson = TabResultsPearson.transpose()\n",
    "    return TabResultsPearson\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pearson Correlation</th>\n",
       "      <th>P-Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Product_Info_1</th>\n",
       "      <td>0.001936</td>\n",
       "      <td>8.939060e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_3</th>\n",
       "      <td>-0.017596</td>\n",
       "      <td>2.253308e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_4</th>\n",
       "      <td>0.162091</td>\n",
       "      <td>2.511135e-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_5</th>\n",
       "      <td>0.001684</td>\n",
       "      <td>9.076046e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_6</th>\n",
       "      <td>-0.012431</td>\n",
       "      <td>3.917005e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_C1</th>\n",
       "      <td>-0.016251</td>\n",
       "      <td>2.628111e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_C2</th>\n",
       "      <td>-0.005937</td>\n",
       "      <td>6.824965e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_C3</th>\n",
       "      <td>0.008581</td>\n",
       "      <td>5.543688e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_C4</th>\n",
       "      <td>0.006639</td>\n",
       "      <td>6.473299e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <td>-0.125005</td>\n",
       "      <td>5.286367e-18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>140 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Pearson Correlation       P-Value\n",
       "Product_Info_1                0.001936  8.939060e-01\n",
       "Product_Info_3               -0.017596  2.253308e-01\n",
       "Product_Info_4                0.162091  2.511135e-29\n",
       "Product_Info_5                0.001684  9.076046e-01\n",
       "Product_Info_6               -0.012431  3.917005e-01\n",
       "...                                ...           ...\n",
       "Product_Info_2_C1            -0.016251  2.628111e-01\n",
       "Product_Info_2_C2            -0.005937  6.824965e-01\n",
       "Product_Info_2_C3             0.008581  5.543688e-01\n",
       "Product_Info_2_C4             0.006639  6.473299e-01\n",
       "Product_Info_2_D1            -0.125005  5.286367e-18\n",
       "\n",
       "[140 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TabResultsPearson = TabPearsonr(X_train,y_train)\n",
    "TabResultsPearson.head(140)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pearson Correlation</th>\n",
       "      <th>P-Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Product_Info_4</th>\n",
       "      <td>0.162091</td>\n",
       "      <td>2.511135e-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ins_Age</th>\n",
       "      <td>-0.148897</td>\n",
       "      <td>5.913433e-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ht</th>\n",
       "      <td>-0.054895</td>\n",
       "      <td>1.535631e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wt</th>\n",
       "      <td>-0.231796</td>\n",
       "      <td>5.719097e-59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>-0.252557</td>\n",
       "      <td>5.074046e-70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_A7</th>\n",
       "      <td>-0.067094</td>\n",
       "      <td>3.689291e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <td>0.047451</td>\n",
       "      <td>1.070393e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <td>-0.125005</td>\n",
       "      <td>5.286367e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <td>-0.039503</td>\n",
       "      <td>6.470998e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "      <td>0.095640</td>\n",
       "      <td>3.977077e-11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>78 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Pearson Correlation       P-Value\n",
       "Product_Info_4                0.162091  2.511135e-29\n",
       "Ins_Age                      -0.148897  5.913433e-25\n",
       "Ht                           -0.054895  1.535631e-04\n",
       "Wt                           -0.231796  5.719097e-59\n",
       "BMI                          -0.252557  5.074046e-70\n",
       "...                                ...           ...\n",
       "Product_Info_2_A7            -0.067094  3.689291e-06\n",
       "Product_Info_2_B2             0.047451  1.070393e-03\n",
       "Product_Info_2_D1            -0.125005  5.286367e-18\n",
       "Product_Info_2_D2            -0.039503  6.470998e-03\n",
       "Product_Info_2_D4             0.095640  3.977077e-11\n",
       "\n",
       "[78 rows x 2 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  significance level  alpha=0.05\n",
    "# TabResultsPearson_Sig=TabResultsPearson[ abs(TabResultsPearson[\"Pearson Correlation\"] ) > 0.5 ]\n",
    "TabResultsPearson_Sig=TabResultsPearson[ TabResultsPearson[\"P-Value\"] < 0.05 ]\n",
    "# TabResultsPearson_Sig=TabResultsPearson_Sig[ abs(TabResultsPearson_Sig[\"Pearson Correlation\"] ) > ( (TabResultsPearson_Sig[\"Pearson Correlation\"] ).abs().mean()) ]\n",
    "TabResultsPearson_Sig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://dataschool.com/fundamentals-of-analysis/correlation-and-p-value/\n",
    "def SelectBestFeatures(TabResultsPearson,thresPVal=0.05):\n",
    "    \"\"\"\n",
    "    Extracts the features that are correlated the most to Y_train and that the pValue is under thresPVal.\n",
    "    \n",
    "    Arguments:\n",
    "    TabResultsPearson -- table of the correlations\n",
    "    thresPVal -- pValue threshold\n",
    "    \n",
    "    Returns:\n",
    "    ListSelectedFeatures -- List of selected features\n",
    "    \"\"\"\n",
    "    \n",
    "    potentiel = TabResultsPearson[TabResultsPearson['P-Value']< thresPVal]\n",
    "    MAD = (potentiel.abs() - potentiel.abs().median()).abs().median() \n",
    "    print (potentiel)\n",
    "    IdxCols = (TabResultsPearson.loc[:,'P-Value'] < thresPVal).nonzero()[0]\n",
    "    TabResultsPearsonLoc = TabResultsPearson.iloc['Pearson Correlation',IdxCols]\n",
    "    \n",
    "    MAD = (TabResultsPearsonLoc.abs() - TabResultsPearsonLoc.abs().median()).abs().median()\n",
    "    ListSelectedFeatures = TabResultsPearsonLoc.loc[TabResultsPearsonLoc.abs() > TabResultsPearsonLoc.abs().median() + MAD]\n",
    "    ListSelectedFeatures = ListSelectedFeatures.index\n",
    "    ListSelectedFeatures = ListSelectedFeatures.values\n",
    "    return ListSelectedFeatures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Pearson Correlation       P-Value\n",
      "Product_Info_3               -0.033121  2.244653e-02\n",
      "Product_Info_4                0.169512  5.913112e-32\n",
      "Ins_Age                      -0.143580  2.664711e-23\n",
      "Ht                           -0.074411  2.834020e-07\n",
      "Wt                           -0.228005  4.592560e-57\n",
      "...                                ...           ...\n",
      "Product_Info_2_B2             0.035858  1.345514e-02\n",
      "Product_Info_2_D1            -0.128618  5.633654e-19\n",
      "Product_Info_2_D2            -0.038179  8.499346e-03\n",
      "Product_Info_2_D3            -0.028489  4.960199e-02\n",
      "Product_Info_2_D4             0.101009  3.003259e-12\n",
      "\n",
      "[84 rows x 2 columns]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    702\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 703\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    704\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   2010\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2011\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"Can only index by location with a [{self._valid_types}]\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2012\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Can only index by location with a [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array]",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-117-0e912b4c793b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mListSelectedFeatures\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSelectBestFeatures\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTabResultsPearson\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mthresPVal\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.05\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Selected Features : \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mListSelectedFeatures\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-116-d924bc0557de>\u001b[0m in \u001b[0;36mSelectBestFeatures\u001b[1;34m(TabResultsPearson, thresPVal)\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mpotentiel\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[0mIdxCols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mTabResultsPearson\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'P-Value'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mthresPVal\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m     \u001b[0mTabResultsPearsonLoc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mTabResultsPearson\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Pearson Correlation'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mIdxCols\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m     \u001b[0mMAD\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mTabResultsPearsonLoc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mTabResultsPearsonLoc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   1760\u001b[0m                 \u001b[1;32mexcept\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1761\u001b[0m                     \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1762\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1763\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1764\u001b[0m             \u001b[1;31m# we by definition only have the 0th axis\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[1;34m(self, tup)\u001b[0m\n\u001b[0;32m   2065\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2066\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2067\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2068\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2069\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    704\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    705\u001b[0m                 raise ValueError(\n\u001b[1;32m--> 706\u001b[1;33m                     \u001b[1;34m\"Location based indexing can only have \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    707\u001b[0m                     \u001b[1;34mf\"[{self._valid_types}] types\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    708\u001b[0m                 )\n",
      "\u001b[1;31mValueError\u001b[0m: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types"
     ]
    }
   ],
   "source": [
    "ListSelectedFeatures = SelectBestFeatures(TabResultsPearson,thresPVal=0.05)\n",
    "\n",
    "print(\"Selected Features : \")\n",
    "print(ListSelectedFeatures)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train2 = pd.DataFrame(ListSelectedFeatures,columns=Cols)\n",
    "X_test2 = pd.DataFrame(ListSelectedFeatures,columns=Cols)\n",
    "\n",
    "newX_train = X_train2[ListSelectedFeatures].copy()\n",
    "newX_test = X_test2[ListSelectedFeatures].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2 Wrapped method\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Recursive Feature Elimination"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The RFE procedure removes one by one the less significative variables using the chosen learning model; in this case, we use the random forests."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>Ins_Age</th>\n",
       "      <th>Ht</th>\n",
       "      <th>Wt</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Employment_Info_1</th>\n",
       "      <th>Employment_Info_2</th>\n",
       "      <th>Employment_Info_3</th>\n",
       "      <th>InsuredInfo_1</th>\n",
       "      <th>InsuredInfo_2</th>\n",
       "      <th>...</th>\n",
       "      <th>Medical_Keyword_43</th>\n",
       "      <th>Medical_Keyword_46</th>\n",
       "      <th>Medical_Keyword_48</th>\n",
       "      <th>Product_Info_2_A5</th>\n",
       "      <th>Product_Info_2_A6</th>\n",
       "      <th>Product_Info_2_A7</th>\n",
       "      <th>Product_Info_2_B2</th>\n",
       "      <th>Product_Info_2_D1</th>\n",
       "      <th>Product_Info_2_D2</th>\n",
       "      <th>Product_Info_2_D4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5452</th>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.582090</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.366109</td>\n",
       "      <td>0.495002</td>\n",
       "      <td>0.118000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.626866</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.389121</td>\n",
       "      <td>0.510214</td>\n",
       "      <td>0.115000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2567</th>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.134328</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.351464</td>\n",
       "      <td>0.455603</td>\n",
       "      <td>0.039500</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5525</th>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.597015</td>\n",
       "      <td>0.654545</td>\n",
       "      <td>0.267782</td>\n",
       "      <td>0.486962</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.522388</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.257322</td>\n",
       "      <td>0.429143</td>\n",
       "      <td>0.040483</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2574</th>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.552239</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>0.163180</td>\n",
       "      <td>0.391202</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.552239</td>\n",
       "      <td>0.581818</td>\n",
       "      <td>0.255230</td>\n",
       "      <td>0.550718</td>\n",
       "      <td>0.058000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5431</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.358209</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.497908</td>\n",
       "      <td>0.854760</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1376</th>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.597015</td>\n",
       "      <td>0.781818</td>\n",
       "      <td>0.317992</td>\n",
       "      <td>0.440213</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1680</th>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.641791</td>\n",
       "      <td>0.618182</td>\n",
       "      <td>0.215481</td>\n",
       "      <td>0.425432</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4750 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_4   Ins_Age        Ht        Wt       BMI  \\\n",
       "5452        0.384615  0.582090  0.800000  0.366109  0.495002   \n",
       "5255        0.230769  0.626866  0.818182  0.389121  0.510214   \n",
       "2567        0.230769  0.134328  0.818182  0.351464  0.455603   \n",
       "5525        0.230769  0.597015  0.654545  0.267782  0.486962   \n",
       "558         0.076923  0.522388  0.690909  0.257322  0.429143   \n",
       "...              ...       ...       ...       ...       ...   \n",
       "2574        0.076923  0.552239  0.545455  0.163180  0.391202   \n",
       "1016        0.076923  0.552239  0.581818  0.255230  0.550718   \n",
       "5431        1.000000  0.358209  0.690909  0.497908  0.854760   \n",
       "1376        0.230769  0.597015  0.781818  0.317992  0.440213   \n",
       "1680        0.076923  0.641791  0.618182  0.215481  0.425432   \n",
       "\n",
       "      Employment_Info_1  Employment_Info_2  Employment_Info_3  InsuredInfo_1  \\\n",
       "5452           0.118000                  9                  1              1   \n",
       "5255           0.115000                  9                  1              1   \n",
       "2567           0.039500                  9                  1              2   \n",
       "5525           0.080000                  9                  1              1   \n",
       "558            0.040483                  9                  1              1   \n",
       "...                 ...                ...                ...            ...   \n",
       "2574           0.040000                  9                  1              2   \n",
       "1016           0.058000                  9                  1              1   \n",
       "5431           0.150000                  9                  1              1   \n",
       "1376           0.090000                  9                  1              1   \n",
       "1680           0.010000                  9                  1              1   \n",
       "\n",
       "      InsuredInfo_2  ...  Medical_Keyword_43  Medical_Keyword_46  \\\n",
       "5452              2  ...                   0                   0   \n",
       "5255              2  ...                   0                   0   \n",
       "2567              2  ...                   0                   0   \n",
       "5525              2  ...                   0                   0   \n",
       "558               2  ...                   0                   0   \n",
       "...             ...  ...                 ...                 ...   \n",
       "2574              2  ...                   0                   0   \n",
       "1016              2  ...                   0                   0   \n",
       "5431              2  ...                   0                   0   \n",
       "1376              2  ...                   0                   0   \n",
       "1680              2  ...                   0                   0   \n",
       "\n",
       "      Medical_Keyword_48  Product_Info_2_A5  Product_Info_2_A6  \\\n",
       "5452                   1                  0                  0   \n",
       "5255                   1                  0                  0   \n",
       "2567                   0                  0                  0   \n",
       "5525                   0                  0                  0   \n",
       "558                    0                  0                  0   \n",
       "...                  ...                ...                ...   \n",
       "2574                   0                  0                  0   \n",
       "1016                   0                  0                  0   \n",
       "5431                   0                  0                  0   \n",
       "1376                   0                  0                  0   \n",
       "1680                   0                  0                  0   \n",
       "\n",
       "      Product_Info_2_A7  Product_Info_2_B2  Product_Info_2_D1  \\\n",
       "5452                  0                  0                  1   \n",
       "5255                  0                  0                  0   \n",
       "2567                  0                  0                  0   \n",
       "5525                  0                  0                  1   \n",
       "558                   0                  0                  0   \n",
       "...                 ...                ...                ...   \n",
       "2574                  0                  0                  1   \n",
       "1016                  0                  0                  0   \n",
       "5431                  0                  0                  0   \n",
       "1376                  0                  0                  1   \n",
       "1680                  0                  0                  1   \n",
       "\n",
       "      Product_Info_2_D2  Product_Info_2_D4  \n",
       "5452                  0                  0  \n",
       "5255                  0                  0  \n",
       "2567                  0                  0  \n",
       "5525                  0                  0  \n",
       "558                   0                  0  \n",
       "...                 ...                ...  \n",
       "2574                  0                  0  \n",
       "1016                  0                  0  \n",
       "5431                  0                  0  \n",
       "1376                  0                  0  \n",
       "1680                  0                  0  \n",
       "\n",
       "[4750 rows x 78 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[TabResultsPearson_Sig.index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### RFE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf = RandomForestClassifier(criterion='entropy', max_depth=5,n_estimators=160, n_jobs=-1)\n",
    "\n",
    "X = X_train[TabResultsPearson_Sig.index]\n",
    "\n",
    "RFE_detecter = RFE(clf,15)\n",
    "\n",
    "RFE_detecter= RFE_detecter.fit(X, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ True  True  True  True  True  True False False False False False False\n",
      " False False False False  True False False False  True  True  True False\n",
      " False False False False False False  True False False False False False\n",
      " False False  True False False False False False False False False  True\n",
      " False False False  True  True False False False False False False False\n",
      " False False False False False False False False False False False False\n",
      " False False False False False False]\n",
      "[ 1  1  1  1  1  1  3  7 38 44  4 14 36 17 23 16  1 11 13 33  1  1  1 47\n",
      "  8 26 21 54 25  6  1  9 35 19 62 15 40 45  1 24 32 29 22 60 12 64 42  1\n",
      "  2 34 27  1  1 46 50 61 18 51 39 56 58 48 53 59 37 31 49 28 57 41 10 55\n",
      " 52 43 63  5 30 20]\n"
     ]
    }
   ],
   "source": [
    "print(RFE_detecter.support_)\n",
    "print(RFE_detecter.ranking_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### best 10 features choosen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Product_Info_1', 'Product_Info_3', 'Product_Info_4', 'Product_Info_5',\n",
       "       'Product_Info_6', 'Product_Info_7', 'InsuredInfo_1', 'InsuredInfo_5',\n",
       "       'InsuredInfo_6', 'InsuredInfo_7', 'Insurance_History_9',\n",
       "       'Medical_History_3', 'Medical_History_12', 'Medical_History_16',\n",
       "       'Medical_History_17'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = RFE_detecter.get_support(1) #the most important features\n",
    "X_choosen = X_train[X_train.columns[f]] # final features`\n",
    "X_choosen.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### RFECV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting estimator with 15 features.\n",
      "Fitting estimator with 14 features.\n",
      "Fitting estimator with 13 features.\n",
      "Fitting estimator with 12 features.\n",
      "Fitting estimator with 11 features.\n",
      "Fitting estimator with 10 features.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RFECV(cv=5,\n",
       "      estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                       criterion='entropy', max_depth=5,\n",
       "                                       max_features='auto', max_leaf_nodes=None,\n",
       "                                       min_impurity_decrease=0.0,\n",
       "                                       min_impurity_split=None,\n",
       "                                       min_samples_leaf=1, min_samples_split=2,\n",
       "                                       min_weight_fraction_leaf=0.0,\n",
       "                                       n_estimators=160, n_jobs=-1,\n",
       "                                       oob_score=False, random_state=None,\n",
       "                                       verbose=0, warm_start=False),\n",
       "      min_features_to_select=1, n_jobs=-1, scoring=None, step=1, verbose=1)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFECV\n",
    "clf = RandomForestClassifier(criterion='entropy', max_depth=5,n_estimators=160, n_jobs=-1)\n",
    "rfe = RFECV(estimator=clf,step=1, cv=5,  verbose=1, n_jobs=-1)\n",
    "X = X_train[TabResultsPearson_Sig.index]\n",
    "rfe.fit(X_train[X_choosen.columns], y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of features VS. cross-validation scores\n",
    "plt.figure()\n",
    "plt.xlabel(\"Number of features selected\")\n",
    "plt.ylabel(\"Cross validation score (nb of correct classifications)\")\n",
    "plt.plot(range(1, len(rfe.grid_scores_) + 1), rfe.grid_scores_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### best features "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Product_Info_3', 'Product_Info_4', 'InsuredInfo_1', 'InsuredInfo_5',\n",
       "       'InsuredInfo_6', 'InsuredInfo_7', 'Insurance_History_9',\n",
       "       'Medical_History_12', 'Medical_History_16'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = rfe.get_support(1) #the most important features\n",
    "X = X_train[X_train[X_choosen.columns].columns[f]] # final features`\n",
    "X.columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### SequentialFeatureSelector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:   44.9s finished\n",
      "\n",
      "[2020-06-12 11:45:41] Features: 1/10 -- score: 0.7530499743956561[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  14 out of  14 | elapsed:   38.6s finished\n",
      "\n",
      "[2020-06-12 11:46:20] Features: 2/10 -- score: 0.7541030501214727[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  13 out of  13 | elapsed:   37.9s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  13 out of  13 | elapsed:   37.9s finished\n",
      "\n",
      "[2020-06-12 11:46:58] Features: 3/10 -- score: 0.7541030501214727[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  12 out of  12 | elapsed:   33.7s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  12 out of  12 | elapsed:   33.7s finished\n",
      "\n",
      "[2020-06-12 11:47:32] Features: 4/10 -- score: 0.753892301965519[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  11 out of  11 | elapsed:   35.0s finished\n",
      "\n",
      "[2020-06-12 11:48:07] Features: 5/10 -- score: 0.7536815538095654[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:   32.2s finished\n",
      "\n",
      "[2020-06-12 11:48:39] Features: 6/10 -- score: 0.7543129118498513[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of   9 | elapsed:   24.1s remaining:    6.8s\n",
      "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed:   30.4s finished\n",
      "\n",
      "[2020-06-12 11:49:09] Features: 7/10 -- score: 0.7538918587517316[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   6 out of   8 | elapsed:   26.4s remaining:    8.7s\n",
      "[Parallel(n_jobs=-1)]: Done   8 out of   8 | elapsed:   27.5s finished\n",
      "\n",
      "[2020-06-12 11:49:37] Features: 8/10 -- score: 0.7534708056536117[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   4 out of   7 | elapsed:   12.6s remaining:    9.4s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of   7 | elapsed:   22.1s finished\n",
      "\n",
      "[2020-06-12 11:49:59] Features: 9/10 -- score: 0.7543137982774264[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of   6 | elapsed:   14.6s remaining:   14.6s\n",
      "[Parallel(n_jobs=-1)]: Done   6 out of   6 | elapsed:   23.0s finished\n",
      "\n",
      "[2020-06-12 11:50:22] Features: 10/10 -- score: 0.7543137987439671"
     ]
    }
   ],
   "source": [
    "from mlxtend.feature_selection import SequentialFeatureSelector as sfs\n",
    "\n",
    "clf = RandomForestClassifier(criterion='entropy', max_depth=5,n_estimators=160, n_jobs=-1)\n",
    "\n",
    "# Build step forward feature selection\n",
    "sfs1 = sfs(clf,k_features=10,forward=True,floating=False,verbose=2,scoring='accuracy',cv=5,n_jobs=-1)\n",
    "\n",
    "# Perform SFFS\n",
    "sfs1 = sfs1.fit(X_train[X_choosen.columns], y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Product_Info_1',\n",
       " 'Product_Info_3',\n",
       " 'Product_Info_5',\n",
       " 'Product_Info_6',\n",
       " 'Product_Info_7',\n",
       " 'InsuredInfo_5',\n",
       " 'InsuredInfo_7',\n",
       " 'Insurance_History_9',\n",
       " 'Medical_History_16',\n",
       " 'Medical_History_17')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sfs1.k_feature_names_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>InsuredInfo_1</th>\n",
       "      <th>InsuredInfo_5</th>\n",
       "      <th>InsuredInfo_6</th>\n",
       "      <th>InsuredInfo_7</th>\n",
       "      <th>Insurance_History_9</th>\n",
       "      <th>Medical_History_12</th>\n",
       "      <th>Medical_History_16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5452</th>\n",
       "      <td>26</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2567</th>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5525</th>\n",
       "      <td>10</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>558</th>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2574</th>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5431</th>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1376</th>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1680</th>\n",
       "      <td>10</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4750 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_3  Product_Info_4  InsuredInfo_1  InsuredInfo_5  \\\n",
       "5452              26        0.384615              1              1   \n",
       "5255              26        0.230769              1              1   \n",
       "2567              26        0.230769              2              1   \n",
       "5525              10        0.230769              1              1   \n",
       "558               26        0.076923              1              1   \n",
       "...              ...             ...            ...            ...   \n",
       "2574              26        0.076923              2              1   \n",
       "1016              26        0.076923              1              1   \n",
       "5431              26        1.000000              1              1   \n",
       "1376              26        0.230769              1              1   \n",
       "1680              10        0.076923              1              1   \n",
       "\n",
       "      InsuredInfo_6  InsuredInfo_7  Insurance_History_9  Medical_History_12  \\\n",
       "5452              1              1                    2                   2   \n",
       "5255              1              1                    2                   2   \n",
       "2567              1              1                    3                   2   \n",
       "5525              2              1                    2                   2   \n",
       "558               2              1                    2                   2   \n",
       "...             ...            ...                  ...                 ...   \n",
       "2574              2              1                    3                   2   \n",
       "1016              2              1                    2                   2   \n",
       "5431              1              1                    3                   2   \n",
       "1376              1              1                    2                   2   \n",
       "1680              2              1                    2                   2   \n",
       "\n",
       "      Medical_History_16  \n",
       "5452                   1  \n",
       "5255                   1  \n",
       "2567                   3  \n",
       "5525                   3  \n",
       "558                    3  \n",
       "...                  ...  \n",
       "2574                   1  \n",
       "1016                   1  \n",
       "5431                   1  \n",
       "1376                   1  \n",
       "1680                   1  \n",
       "\n",
       "[4750 rows x 9 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_New=X_train[['Product_Info_3', 'Product_Info_4', 'InsuredInfo_1', 'InsuredInfo_5',\n",
    "       'InsuredInfo_6', 'InsuredInfo_7', 'Insurance_History_9',\n",
    "       'Medical_History_12', 'Medical_History_16']]\n",
    "X_train_New"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Info_3</th>\n",
       "      <th>Product_Info_4</th>\n",
       "      <th>InsuredInfo_1</th>\n",
       "      <th>InsuredInfo_5</th>\n",
       "      <th>InsuredInfo_6</th>\n",
       "      <th>InsuredInfo_7</th>\n",
       "      <th>Insurance_History_9</th>\n",
       "      <th>Medical_History_12</th>\n",
       "      <th>Medical_History_16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>26</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5615</th>\n",
       "      <td>26</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>10</td>\n",
       "      <td>0.164103</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5591</th>\n",
       "      <td>26</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4650</th>\n",
       "      <td>26</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>484</th>\n",
       "      <td>26</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3011</th>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2319</th>\n",
       "      <td>26</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4806</th>\n",
       "      <td>26</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4969</th>\n",
       "      <td>26</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1188 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Product_Info_3  Product_Info_4  InsuredInfo_1  InsuredInfo_5  \\\n",
       "2928              26        0.025641              1              1   \n",
       "5615              26        0.230769              1              1   \n",
       "367               10        0.164103              2              1   \n",
       "5591              26        1.000000              1              1   \n",
       "4650              26        0.384615              1              1   \n",
       "...              ...             ...            ...            ...   \n",
       "484               26        0.128205              1              1   \n",
       "3011              26        0.076923              1              1   \n",
       "2319              26        0.076923              1              1   \n",
       "4806              26        0.384615              1              1   \n",
       "4969              26        0.000000              1              1   \n",
       "\n",
       "      InsuredInfo_6  InsuredInfo_7  Insurance_History_9  Medical_History_12  \\\n",
       "2928              1              1                    3                   2   \n",
       "5615              1              1                    2                   2   \n",
       "367               2              1                    2                   2   \n",
       "5591              1              1                    2                   2   \n",
       "4650              1              1                    3                   2   \n",
       "...             ...            ...                  ...                 ...   \n",
       "484               1              1                    2                   2   \n",
       "3011              1              1                    2                   2   \n",
       "2319              2              1                    3                   3   \n",
       "4806              1              1                    3                   2   \n",
       "4969              2              1                    3                   2   \n",
       "\n",
       "      Medical_History_16  \n",
       "2928                   1  \n",
       "5615                   3  \n",
       "367                    3  \n",
       "5591                   1  \n",
       "4650                   1  \n",
       "...                  ...  \n",
       "484                    1  \n",
       "3011                   1  \n",
       "2319                   3  \n",
       "4806                   1  \n",
       "4969                   1  \n",
       "\n",
       "[1188 rows x 9 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_New=X_test[['Product_Info_3', 'Product_Info_4', 'InsuredInfo_1', 'InsuredInfo_5',\n",
    "       'InsuredInfo_6', 'InsuredInfo_7', 'Insurance_History_9',\n",
    "       'Medical_History_12', 'Medical_History_16']]\n",
    "X_test_New"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### now we have completed the traitment in our data now we can build our model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the Model\n",
    "######   The RandomForest Classifier is the most stable from all  the decision tree models and less likely to overfit. Therefore it is a good choice to start with.\n",
    "######   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#instantiate, fit and make preditions\n",
    "from sklearn import metrics\n",
    "model=RandomForestClassifier(random_state=10)\n",
    "model.fit(X_train_New,y_train)\n",
    "y_pred=model.predict(X_test_New)\n",
    "\n",
    "#compute metrics\n",
    "train_accuracy=model.score(X_train_New,y_train)\n",
    "test_accuracy=model.score(X_test_New,y_test)\n",
    "p_score=metrics.precision_score(y_test,y_pred)\n",
    "r_score=metrics.recall_score(y_test,y_pred)\n",
    "f1_score=metrics.f1_score(y_test,y_pred)\n",
    "fp, tp, th = metrics.roc_curve(y_test, y_pred)\n",
    "auc = metrics.auc(fp, tp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.791\n",
      "Test Accuracy: 0.729\n",
      "Precision Score: 0.76\n",
      "Recall Score: 0.928\n",
      "F1 Score: 0.836\n",
      "AUC: 0.541\n",
      "==============Classification Report=============================\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.42      0.15      0.23       305\n",
      "           1       0.76      0.93      0.84       883\n",
      "\n",
      "    accuracy                           0.73      1188\n",
      "   macro avg       0.59      0.54      0.53      1188\n",
      "weighted avg       0.67      0.73      0.68      1188\n",
      "\n",
      "==============Confusion Matrix=============================\n",
      "[[ 47 258]\n",
      " [ 64 819]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Accuracy: {}\".format(round(train_accuracy,3)))\n",
    "print(\"Test Accuracy: {}\".format(round(test_accuracy,3)))\n",
    "print(\"Precision Score: {}\".format(round(p_score,3)))\n",
    "print(\"Recall Score: {}\".format(round(r_score,3)))\n",
    "print(\"F1 Score: {}\".format(round(f1_score,3)))\n",
    "print(\"AUC: {}\".format(round(auc,3)))\n",
    "\n",
    "print(\"==============Classification Report=============================\")\n",
    "print(metrics.classification_report(y_test,y_pred))\n",
    "\n",
    "\n",
    "print(\"==============Confusion Matrix=============================\")\n",
    "print(metrics.confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Our Random forest is overfitting, as a next step will tune the hyper parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of rows by response categories')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=y_train).set_title('Distribution of rows by response categories')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Since we are dealing with an imbalanced dataset,I balanced the class weights and used weighted F1 score as a scoring metric for the hyperparameters tuning and model evaluation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score='raise-deprecating',\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    class_weight='balanced',\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators='warn',\n",
       "                                                    n_jobs=None,\n",
       "                                                    oob_score=False,\n",
       "                                                    random_state=42, verbose=0,\n",
       "                                                    warm_start=False),\n",
       "                   iid='warn', n_iter=5, n_jobs=None,\n",
       "                   param_distributions={'bootstrap': [True],\n",
       "                                        'max_depth': [50, 100],\n",
       "                                        'max_features': [3, 8],\n",
       "                                        'min_samples_leaf': [3, 5],\n",
       "                                        'min_samples_split': [2, 5],\n",
       "                                        'n_estimators': [300, 500]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=42, refit=True,\n",
       "                   return_train_score=False, scoring='f1_weighted', verbose=0)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "\"\"\" \n",
    "Randomized search on hyper parameters.\n",
    "RandomizedSearchCV implements a “fit” and a “score” method. It also implements*\n",
    "“predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform”\n",
    "if they are implemented in the estimator used.\n",
    "The parameters of the estimator used to apply these methods are optimized by cross-validated search over parameter settings.\n",
    "\"\"\"\n",
    "\n",
    "from scipy.stats import randint\n",
    "\n",
    "# Create the random grid\n",
    "param_grid = {'bootstrap': [True],\n",
    "                'max_depth': [50, 100],\n",
    "                'max_features': [3, 8],\n",
    "                'min_samples_leaf': [3, 5],\n",
    "                'min_samples_split': [2, 5],\n",
    "                'n_estimators': [300, 500]\n",
    "}\n",
    "\n",
    "\n",
    "forest_reg = RandomForestClassifier(random_state=42, class_weight=\"balanced\")\n",
    "rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_grid,\n",
    "                                n_iter=5, cv=5, scoring='f1_weighted', random_state=42)\n",
    "rnd_search.fit(X_train_New, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier(bootstrap=True, class_weight='balanced',\n",
      "                       criterion='gini', max_depth=100, max_features=3,\n",
      "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "                       min_impurity_split=None, min_samples_leaf=3,\n",
      "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "                       n_estimators=500, n_jobs=None, oob_score=False,\n",
      "                       random_state=42, verbose=0, warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "final_model = rnd_search.best_estimator_\n",
    "print(final_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "scores = cross_val_score(final_model, X_train_New, y_train,scoring=\"f1_weighted\", cv=5)\n",
    "\n",
    "def display_scores(scores):\n",
    "    print(\"Scores:\", scores)\n",
    "    print(\"Mean:\", scores.mean())\n",
    "    print(\"Standard Deviation:\", scores.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Dataset\n",
      "Scores: [0.63591405 0.64899215 0.61696879 0.6591104  0.65222649]\n",
      "Mean: 0.6426423773912067\n",
      "Standard Deviation: 0.01488471629711032\n",
      "Train Dataset\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.40      0.65      0.50      1193\n",
      "           1       0.85      0.67      0.75      3557\n",
      "\n",
      "    accuracy                           0.67      4750\n",
      "   macro avg       0.63      0.66      0.62      4750\n",
      "weighted avg       0.74      0.67      0.69      4750\n",
      "\n",
      "==================================================\n",
      "Test Dataset\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.36      0.60      0.45       305\n",
      "           1       0.82      0.63      0.71       883\n",
      "\n",
      "    accuracy                           0.62      1188\n",
      "   macro avg       0.59      0.61      0.58      1188\n",
      "weighted avg       0.70      0.62      0.64      1188\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from  sklearn.metrics import classification_report\n",
    "\n",
    "print(\"Validation Dataset\")\n",
    "display_scores(scores)\n",
    "\n",
    "predictions_train = final_model.predict(X_train_New)\n",
    "print(\"Train Dataset\")\n",
    "print(classification_report(y_train, predictions_train))\n",
    "print(\"=\"*50)\n",
    "predictions_test = final_model.predict(X_test_New)\n",
    "print(\"Test Dataset\")\n",
    "print(classification_report(y_test, predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h6>\n",
    "We need regularise the model.\n",
    "decrease the value of the parameters that start with max_ and increase the value of parameters that start with min_. \n",
    "helps to reduce the overfitting \n",
    "\n",
    "</h6>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 32 candidates, totalling 96 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:  1.3min\n",
      "[Parallel(n_jobs=-1)]: Done  96 out of  96 | elapsed:  3.6min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=3, error_score='raise-deprecating',\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    class_weight=None,\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators='warn',\n",
       "                                                    n_jobs=None,\n",
       "                                                    oob_sc...False,\n",
       "                                                    random_state=None,\n",
       "                                                    verbose=0,\n",
       "                                                    warm_start=False),\n",
       "                   iid='warn', n_iter=50, n_jobs=-1,\n",
       "                   param_distributions={'bootstrap': [True],\n",
       "                                        'max_depth': [50, 100],\n",
       "                                        'max_features': [3, 8],\n",
       "                                        'min_samples_leaf': [3, 5],\n",
       "                                        'min_samples_split': [2, 5],\n",
       "                                        'n_estimators': [300, 500]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=42, refit=True,\n",
       "                   return_train_score=False, scoring='f1_weighted', verbose=2)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "\n",
    "rf_random = RandomizedSearchCV(estimator = rf,\n",
    "                               param_distributions = param_grid,\n",
    "                               n_iter = 50, cv = 3, \n",
    "                               verbose=2,\n",
    "                               scoring='f1_weighted',\n",
    "                               random_state=42,\n",
    "                               n_jobs = -1)# Fit the random search model\n",
    "rf_random.fit(X_train_New,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'n_estimators': 300, 'min_samples_split': 2, 'min_samples_leaf': 3, 'max_features': 8, 'max_depth': 100, 'bootstrap': True}\n"
     ]
    }
   ],
   "source": [
    "print(rf_random.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.773\n",
      "Test Accuracy: 0.753\n",
      "Precision Score: 0.765\n",
      "Recall Score: 0.963\n",
      "F1 Score: 0.853\n",
      "AUC: 0.553\n",
      "==============Classification Report=============================\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.57      0.14      0.23       305\n",
      "           1       0.77      0.96      0.85       883\n",
      "\n",
      "    accuracy                           0.75      1188\n",
      "   macro avg       0.67      0.55      0.54      1188\n",
      "weighted avg       0.72      0.75      0.69      1188\n",
      "\n",
      "==============Confusion Matrix=============================\n",
      "[[ 44 261]\n",
      " [ 33 850]]\n"
     ]
    }
   ],
   "source": [
    "#instantiate, fit and make preditions\n",
    "rf_model=RandomForestClassifier(n_estimators= 300, min_samples_split= 2,\n",
    "                                min_samples_leaf= 3, max_features= 8 , max_depth= 100, bootstrap= True\n",
    "                                )\n",
    "rf_model.fit(X_train_New,y_train)\n",
    "y_pred=rf_model.predict(X_test_New)\n",
    "\n",
    "#compute metrics\n",
    "train_accuracy_rf=rf_model.score(X_train_New,y_train)\n",
    "test_accuracy_rf=rf_model.score(X_test_New,y_test)\n",
    "p_score_rf=metrics.precision_score(y_test,y_pred)\n",
    "r_score_rf=metrics.recall_score(y_test,y_pred)\n",
    "f1_score_rf=metrics.f1_score(y_test,y_pred)\n",
    "fp_rf, tp_rf, th_rf = metrics.roc_curve(y_test, y_pred)\n",
    "auc_rf = metrics.auc(fp_rf, tp_rf)\n",
    "\n",
    "\n",
    "print(\"Train Accuracy: {}\".format(round(train_accuracy_rf,3)))\n",
    "print(\"Test Accuracy: {}\".format(round(test_accuracy_rf,3)))\n",
    "print(\"Precision Score: {}\".format(round(p_score_rf,3)))\n",
    "print(\"Recall Score: {}\".format(round(r_score_rf,3)))\n",
    "print(\"F1 Score: {}\".format(round(f1_score_rf,3)))\n",
    "print(\"AUC: {}\".format(round(auc_rf,3)))\n",
    "\n",
    "print(\"==============Classification Report=============================\")\n",
    "print(metrics.classification_report(y_test,y_pred))\n",
    "\n",
    "\n",
    "print(\"==============Confusion Matrix=============================\")\n",
    "print(metrics.confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Plot ROC curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr,tpr,thresholds=metrics.roc_curve(y_pred,y_test)\n",
    "def plot_roc_curve(fpr,tpr,label=None):\n",
    "    plt.plot(fpr,tpr,linewidth=2,label=label)\n",
    "    plt.plot([0,1],[0,1],'k--')\n",
    "    plt.axis([0,1,0,1])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    \n",
    "plot_roc_curve(fpr,tpr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GRID SEARCH "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:   13.5s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 24 candidates, totalling 120 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    6.2s\n",
      "[Parallel(n_jobs=-1)]: Done 120 out of 120 | elapsed:   27.4s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 342 candidates, totalling 1710 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    3.4s\n",
      "[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:   16.3s\n",
      "[Parallel(n_jobs=-1)]: Done 357 tasks      | elapsed:   36.8s\n",
      "[Parallel(n_jobs=-1)]: Done 640 tasks      | elapsed:  1.2min\n",
      "[Parallel(n_jobs=-1)]: Done 1005 tasks      | elapsed:  2.2min\n",
      "[Parallel(n_jobs=-1)]: Done 1450 tasks      | elapsed:  3.2min\n",
      "[Parallel(n_jobs=-1)]: Done 1710 out of 1710 | elapsed:  4.0min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=90, shuffle=True),\n",
       "             error_score='raise-deprecating',\n",
       "             estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=20, n_jobs=None,\n",
       "                                              oob_score=False,\n",
       "                                              random_state=None, verbose=0,\n",
       "                                              warm_start=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'max_depth': range(1, 20),\n",
       "                         'min_samples_split': range(2, 20)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='f1_weighted', verbose=2)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "\n",
    "#model\n",
    "LG_clf = LogisticRegression()\n",
    "KNN_clf = KNeighborsClassifier()\n",
    "RF_clf = RandomForestClassifier(n_estimators=20)\n",
    "\n",
    "\n",
    "#Cross-validation\n",
    "sk = StratifiedKFold(n_splits=5,random_state=90,shuffle=True)\n",
    "\n",
    "#LG and KNN parameters\n",
    "LG_parameters = {'C':[0.01,.1,1,2,5]}\n",
    "KNN_parameters = {'n_neighbors':[1,2,5,10,20,30], 'p':[1,2],'weights':['uniform','distance']}\n",
    "RF_parameters = {'max_depth':range(1,20), 'min_samples_split':range(2,20)}\n",
    "ADA_parameters = {'learning_rate':[0.01,0.05,0.1,0.5,1]}\n",
    "\n",
    "\n",
    "#Search for best parameters.\n",
    "gs_LG = GridSearchCV(LG_clf, param_grid=LG_parameters, cv=sk,scoring='f1_weighted',  n_jobs = -1, verbose = 2)\n",
    "gs_KNN = GridSearchCV(KNN_clf, param_grid=KNN_parameters, cv=sk,scoring='f1_weighted', n_jobs = -1, verbose = 2)\n",
    "gs_RF = GridSearchCV(RF_clf, param_grid=RF_parameters, cv=sk,scoring='f1_weighted', n_jobs = -1, verbose = 2)\n",
    "\n",
    "#Train\n",
    "gs_LG.fit(X_train_New,y_train)\n",
    "gs_KNN.fit(X_train_New,y_train)\n",
    "gs_RF.fit(X_train_New,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def evaluate(model,X_train,y_train,X_valid,y_valid):\n",
    "    y_pred=model.predict(X_valid)\n",
    "    #compute metrics\n",
    "    train_accuracy_rf=model.score(X_train,y_train)\n",
    "    test_accuracy_rf=model.score(X_valid,y_valid)\n",
    "    p_score_rf=metrics.precision_score(y_valid,y_pred)\n",
    "    r_score_rf=metrics.recall_score(y_valid,y_pred)\n",
    "    f1_score_rf=metrics.f1_score(y_valid,y_pred)\n",
    "    fp_rf, tp_rf, th_rf = metrics.roc_curve(y_valid, y_pred)\n",
    "    auc_rf = metrics.auc(fp_rf, tp_rf)\n",
    "    \n",
    "    print(\"Train Accuracy: {}\".format(round(train_accuracy_rf,3)))\n",
    "    print(\"Test Accuracy: {}\".format(round(test_accuracy_rf,3)))\n",
    "    print(\"Precision Score: {}\".format(round(p_score_rf,3)))\n",
    "    print(\"Recall Score: {}\".format(round(r_score_rf,3)))\n",
    "    print(\"F1 Score: {}\".format(round(f1_score_rf,3)))\n",
    "    print(\"AUC: {}\".format(round(auc_rf,3)))\n",
    "    \n",
    "    print(\"==============Classification Report=============================\")\n",
    "    print(metrics.classification_report(y_valid,y_pred))\n",
    "    print(\"==============Confusion Matrix=============================\")\n",
    "    print(metrics.confusion_matrix(y_valid,y_pred))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================== RFC  =============================\n",
      "Train Accuracy: 0.78\n",
      "Test Accuracy: 0.753\n",
      "Precision Score: 0.765\n",
      "Recall Score: 0.964\n",
      "F1 Score: 0.853\n",
      "AUC: 0.554\n",
      "==============Classification Report=============================\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.58      0.14      0.23       305\n",
      "           1       0.77      0.96      0.85       883\n",
      "\n",
      "    accuracy                           0.75      1188\n",
      "   macro avg       0.67      0.55      0.54      1188\n",
      "weighted avg       0.72      0.75      0.69      1188\n",
      "\n",
      "==============Confusion Matrix=============================\n",
      "[[ 44 261]\n",
      " [ 32 851]]\n",
      "\n",
      " \n",
      " =====================================================================================\n",
      "============================== LG  =============================\n",
      "Train Accuracy: 0.752\n",
      "Test Accuracy: 0.75\n",
      "Precision Score: 0.752\n",
      "Recall Score: 0.99\n",
      "F1 Score: 0.855\n",
      "AUC: 0.523\n",
      "==============Classification Report=============================\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.65      0.06      0.10       305\n",
      "           1       0.75      0.99      0.85       883\n",
      "\n",
      "    accuracy                           0.75      1188\n",
      "   macro avg       0.70      0.52      0.48      1188\n",
      "weighted avg       0.73      0.75      0.66      1188\n",
      "\n",
      "==============Confusion Matrix=============================\n",
      "[[ 17 288]\n",
      " [  9 874]]\n",
      "\n",
      " \n",
      " =====================================================================================\n",
      "============================== KNN  =============================\n",
      "Train Accuracy: 0.761\n",
      "Test Accuracy: 0.746\n",
      "Precision Score: 0.76\n",
      "Recall Score: 0.961\n",
      "F1 Score: 0.849\n",
      "AUC: 0.541\n",
      "==============Classification Report=============================\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.12      0.20       305\n",
      "           1       0.76      0.96      0.85       883\n",
      "\n",
      "    accuracy                           0.75      1188\n",
      "   macro avg       0.64      0.54      0.52      1188\n",
      "weighted avg       0.70      0.75      0.68      1188\n",
      "\n",
      "==============Confusion Matrix=============================\n",
      "[[ 37 268]\n",
      " [ 34 849]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"============================== RFC  =============================\")\n",
    "evaluate(gs_RF.best_estimator_,X_train_New,y_train,X_test_New,y_test)\n",
    "print(\"\\n \\n =====================================================================================\")\n",
    "print(\"============================== LG  =============================\")\n",
    "evaluate(gs_LG.best_estimator_,X_train_New,y_train,X_test_New,y_test)\n",
    "\n",
    "print(\"\\n \\n =====================================================================================\")\n",
    "print(\"============================== KNN  =============================\")\n",
    "evaluate(gs_KNN.best_estimator_,X_train_New,y_train,X_test_New,y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
